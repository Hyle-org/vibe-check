// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: hyle/zktx/v1/types.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "hyle.zktx.v1";

/** Params defines the parameters of the module. */
export interface Params {
}

/** GenesisState is the state that must be provided at genesis. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params: Params | undefined;
  contracts: { [key: string]: Contract };
}

export interface GenesisState_ContractsEntry {
  key: string;
  value: Contract | undefined;
}

/** Contract is the state of a contract */
export interface Contract {
  /** The identifier of the verifier to run for this contract */
  verifier: string;
  /** An identifier for the program (may depend on verifier) */
  programId: Uint8Array;
  /** Recap of the current contract state */
  stateDigest: Uint8Array;
}

/** PayloadMetadata is the transient state we need to keep to settle payloads */
export interface PayloadMetadata {
  /** Hash of the payload */
  payloadHash: Uint8Array;
  /** Identity of the caller */
  identity: string;
  /** Contract name to settle */
  contractName: string;
  /** The next state to transition to */
  nextState: Uint8Array;
  /** If this payload was verified */
  verified: boolean;
}

/** InnerPayloadTimeout is data to trigger TX timeout. */
export interface InnerPayloadTimeout {
  /** Hash of the TX */
  txHash: Uint8Array;
  /** Index of the payload in the tx */
  payloadIndex: number;
}

/** PayloadTimeout is a list of payloads and their timeouts */
export interface PayloadTimeout {
  /** List of payloads and their timeouts */
  payloads: InnerPayloadTimeout[];
}

function createBaseParams(): Params {
  return {};
}

export const Params = {
  encode(_: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Params {
    return {};
  },

  toJSON(_: Params): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(_: I): Params {
    const message = createBaseParams();
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return { params: undefined, contracts: {} };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    Object.entries(message.contracts).forEach(([key, value]) => {
      GenesisState_ContractsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GenesisState_ContractsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.contracts[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      contracts: isObject(object.contracts)
        ? Object.entries(object.contracts).reduce<{ [key: string]: Contract }>((acc, [key, value]) => {
          acc[key] = Contract.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.contracts) {
      const entries = Object.entries(message.contracts);
      if (entries.length > 0) {
        obj.contracts = {};
        entries.forEach(([k, v]) => {
          obj.contracts[k] = Contract.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.contracts = Object.entries(object.contracts ?? {}).reduce<{ [key: string]: Contract }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Contract.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGenesisState_ContractsEntry(): GenesisState_ContractsEntry {
  return { key: "", value: undefined };
}

export const GenesisState_ContractsEntry = {
  encode(message: GenesisState_ContractsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Contract.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_ContractsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_ContractsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Contract.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_ContractsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Contract.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GenesisState_ContractsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Contract.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState_ContractsEntry>, I>>(base?: I): GenesisState_ContractsEntry {
    return GenesisState_ContractsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState_ContractsEntry>, I>>(object: I): GenesisState_ContractsEntry {
    const message = createBaseGenesisState_ContractsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Contract.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseContract(): Contract {
  return { verifier: "", programId: new Uint8Array(0), stateDigest: new Uint8Array(0) };
}

export const Contract = {
  encode(message: Contract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.verifier !== "") {
      writer.uint32(10).string(message.verifier);
    }
    if (message.programId.length !== 0) {
      writer.uint32(18).bytes(message.programId);
    }
    if (message.stateDigest.length !== 0) {
      writer.uint32(26).bytes(message.stateDigest);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Contract {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.verifier = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.programId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stateDigest = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Contract {
    return {
      verifier: isSet(object.verifier) ? globalThis.String(object.verifier) : "",
      programId: isSet(object.programId) ? bytesFromBase64(object.programId) : new Uint8Array(0),
      stateDigest: isSet(object.stateDigest) ? bytesFromBase64(object.stateDigest) : new Uint8Array(0),
    };
  },

  toJSON(message: Contract): unknown {
    const obj: any = {};
    if (message.verifier !== "") {
      obj.verifier = message.verifier;
    }
    if (message.programId.length !== 0) {
      obj.programId = base64FromBytes(message.programId);
    }
    if (message.stateDigest.length !== 0) {
      obj.stateDigest = base64FromBytes(message.stateDigest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Contract>, I>>(base?: I): Contract {
    return Contract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Contract>, I>>(object: I): Contract {
    const message = createBaseContract();
    message.verifier = object.verifier ?? "";
    message.programId = object.programId ?? new Uint8Array(0);
    message.stateDigest = object.stateDigest ?? new Uint8Array(0);
    return message;
  },
};

function createBasePayloadMetadata(): PayloadMetadata {
  return {
    payloadHash: new Uint8Array(0),
    identity: "",
    contractName: "",
    nextState: new Uint8Array(0),
    verified: false,
  };
}

export const PayloadMetadata = {
  encode(message: PayloadMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payloadHash.length !== 0) {
      writer.uint32(10).bytes(message.payloadHash);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.contractName !== "") {
      writer.uint32(26).string(message.contractName);
    }
    if (message.nextState.length !== 0) {
      writer.uint32(34).bytes(message.nextState);
    }
    if (message.verified !== false) {
      writer.uint32(40).bool(message.verified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PayloadMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayloadMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contractName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nextState = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.verified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayloadMetadata {
    return {
      payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(0),
      identity: isSet(object.identity) ? globalThis.String(object.identity) : "",
      contractName: isSet(object.contractName) ? globalThis.String(object.contractName) : "",
      nextState: isSet(object.nextState) ? bytesFromBase64(object.nextState) : new Uint8Array(0),
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
    };
  },

  toJSON(message: PayloadMetadata): unknown {
    const obj: any = {};
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.contractName !== "") {
      obj.contractName = message.contractName;
    }
    if (message.nextState.length !== 0) {
      obj.nextState = base64FromBytes(message.nextState);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayloadMetadata>, I>>(base?: I): PayloadMetadata {
    return PayloadMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayloadMetadata>, I>>(object: I): PayloadMetadata {
    const message = createBasePayloadMetadata();
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    message.identity = object.identity ?? "";
    message.contractName = object.contractName ?? "";
    message.nextState = object.nextState ?? new Uint8Array(0);
    message.verified = object.verified ?? false;
    return message;
  },
};

function createBaseInnerPayloadTimeout(): InnerPayloadTimeout {
  return { txHash: new Uint8Array(0), payloadIndex: 0 };
}

export const InnerPayloadTimeout = {
  encode(message: InnerPayloadTimeout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.txHash.length !== 0) {
      writer.uint32(10).bytes(message.txHash);
    }
    if (message.payloadIndex !== 0) {
      writer.uint32(16).uint32(message.payloadIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InnerPayloadTimeout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInnerPayloadTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.payloadIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InnerPayloadTimeout {
    return {
      txHash: isSet(object.txHash) ? bytesFromBase64(object.txHash) : new Uint8Array(0),
      payloadIndex: isSet(object.payloadIndex) ? globalThis.Number(object.payloadIndex) : 0,
    };
  },

  toJSON(message: InnerPayloadTimeout): unknown {
    const obj: any = {};
    if (message.txHash.length !== 0) {
      obj.txHash = base64FromBytes(message.txHash);
    }
    if (message.payloadIndex !== 0) {
      obj.payloadIndex = Math.round(message.payloadIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InnerPayloadTimeout>, I>>(base?: I): InnerPayloadTimeout {
    return InnerPayloadTimeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InnerPayloadTimeout>, I>>(object: I): InnerPayloadTimeout {
    const message = createBaseInnerPayloadTimeout();
    message.txHash = object.txHash ?? new Uint8Array(0);
    message.payloadIndex = object.payloadIndex ?? 0;
    return message;
  },
};

function createBasePayloadTimeout(): PayloadTimeout {
  return { payloads: [] };
}

export const PayloadTimeout = {
  encode(message: PayloadTimeout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.payloads) {
      InnerPayloadTimeout.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PayloadTimeout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayloadTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payloads.push(InnerPayloadTimeout.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayloadTimeout {
    return {
      payloads: globalThis.Array.isArray(object?.payloads)
        ? object.payloads.map((e: any) => InnerPayloadTimeout.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PayloadTimeout): unknown {
    const obj: any = {};
    if (message.payloads?.length) {
      obj.payloads = message.payloads.map((e) => InnerPayloadTimeout.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayloadTimeout>, I>>(base?: I): PayloadTimeout {
    return PayloadTimeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayloadTimeout>, I>>(object: I): PayloadTimeout {
    const message = createBasePayloadTimeout();
    message.payloads = object.payloads?.map((e) => InnerPayloadTimeout.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
