// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: hyle/zktx/v1/tx.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "hyle.zktx.v1";

/** Payload is a blob */
export interface Payload {
  /** Name of target contract */
  contractName: string;
  /** Payload data */
  data: Uint8Array;
}

/** execute a zk-proven state change - request type */
export interface MsgPublishPayloads {
  /** Identity is the identity of the TX sender */
  identity: string;
  /** list of payloads */
  payloads: Payload[];
}

/** No response */
export interface MsgPublishPayloadsResponse {
}

/** Prove a previously published payload */
export interface MsgPublishPayloadProof {
  /** Tx hash of the payload to prove */
  txHash: Uint8Array;
  /** Index of the payload in the tx */
  payloadIndex: number;
  /** Contract name */
  contractName: string;
  /** Proof of the payload */
  proof: Uint8Array;
}

/** No response */
export interface MsgPublishPayloadProofResponse {
}

/** Register a contract - request type */
export interface MsgRegisterContract {
  /** owner is the contract owner */
  owner: string;
  /** Identifier of the verifier */
  verifier: string;
  /** Identifier of the smart contract */
  programId: Uint8Array;
  /** Initial state digest */
  stateDigest: Uint8Array;
  /** Identifier of the contract name */
  contractName: string;
}

/** Register a contract - response type */
export interface MsgRegisterContractResponse {
}

function createBasePayload(): Payload {
  return { contractName: "", data: new Uint8Array(0) };
}

export const Payload = {
  encode(message: Payload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contractName !== "") {
      writer.uint32(10).string(message.contractName);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Payload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contractName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payload {
    return {
      contractName: isSet(object.contractName) ? globalThis.String(object.contractName) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: Payload): unknown {
    const obj: any = {};
    if (message.contractName !== "") {
      obj.contractName = message.contractName;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payload>, I>>(base?: I): Payload {
    return Payload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payload>, I>>(object: I): Payload {
    const message = createBasePayload();
    message.contractName = object.contractName ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgPublishPayloads(): MsgPublishPayloads {
  return { identity: "", payloads: [] };
}

export const MsgPublishPayloads = {
  encode(message: MsgPublishPayloads, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.identity !== "") {
      writer.uint32(10).string(message.identity);
    }
    for (const v of message.payloads) {
      Payload.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishPayloads {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishPayloads();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.identity = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payloads.push(Payload.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPublishPayloads {
    return {
      identity: isSet(object.identity) ? globalThis.String(object.identity) : "",
      payloads: globalThis.Array.isArray(object?.payloads) ? object.payloads.map((e: any) => Payload.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgPublishPayloads): unknown {
    const obj: any = {};
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.payloads?.length) {
      obj.payloads = message.payloads.map((e) => Payload.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishPayloads>, I>>(base?: I): MsgPublishPayloads {
    return MsgPublishPayloads.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishPayloads>, I>>(object: I): MsgPublishPayloads {
    const message = createBaseMsgPublishPayloads();
    message.identity = object.identity ?? "";
    message.payloads = object.payloads?.map((e) => Payload.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgPublishPayloadsResponse(): MsgPublishPayloadsResponse {
  return {};
}

export const MsgPublishPayloadsResponse = {
  encode(_: MsgPublishPayloadsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishPayloadsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishPayloadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPublishPayloadsResponse {
    return {};
  },

  toJSON(_: MsgPublishPayloadsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishPayloadsResponse>, I>>(base?: I): MsgPublishPayloadsResponse {
    return MsgPublishPayloadsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishPayloadsResponse>, I>>(_: I): MsgPublishPayloadsResponse {
    const message = createBaseMsgPublishPayloadsResponse();
    return message;
  },
};

function createBaseMsgPublishPayloadProof(): MsgPublishPayloadProof {
  return { txHash: new Uint8Array(0), payloadIndex: 0, contractName: "", proof: new Uint8Array(0) };
}

export const MsgPublishPayloadProof = {
  encode(message: MsgPublishPayloadProof, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.txHash.length !== 0) {
      writer.uint32(10).bytes(message.txHash);
    }
    if (message.payloadIndex !== 0) {
      writer.uint32(16).uint32(message.payloadIndex);
    }
    if (message.contractName !== "") {
      writer.uint32(26).string(message.contractName);
    }
    if (message.proof.length !== 0) {
      writer.uint32(34).bytes(message.proof);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishPayloadProof {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishPayloadProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.payloadIndex = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contractName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.proof = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPublishPayloadProof {
    return {
      txHash: isSet(object.txHash) ? bytesFromBase64(object.txHash) : new Uint8Array(0),
      payloadIndex: isSet(object.payloadIndex) ? globalThis.Number(object.payloadIndex) : 0,
      contractName: isSet(object.contractName) ? globalThis.String(object.contractName) : "",
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgPublishPayloadProof): unknown {
    const obj: any = {};
    if (message.txHash.length !== 0) {
      obj.txHash = base64FromBytes(message.txHash);
    }
    if (message.payloadIndex !== 0) {
      obj.payloadIndex = Math.round(message.payloadIndex);
    }
    if (message.contractName !== "") {
      obj.contractName = message.contractName;
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishPayloadProof>, I>>(base?: I): MsgPublishPayloadProof {
    return MsgPublishPayloadProof.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishPayloadProof>, I>>(object: I): MsgPublishPayloadProof {
    const message = createBaseMsgPublishPayloadProof();
    message.txHash = object.txHash ?? new Uint8Array(0);
    message.payloadIndex = object.payloadIndex ?? 0;
    message.contractName = object.contractName ?? "";
    message.proof = object.proof ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgPublishPayloadProofResponse(): MsgPublishPayloadProofResponse {
  return {};
}

export const MsgPublishPayloadProofResponse = {
  encode(_: MsgPublishPayloadProofResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishPayloadProofResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishPayloadProofResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPublishPayloadProofResponse {
    return {};
  },

  toJSON(_: MsgPublishPayloadProofResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishPayloadProofResponse>, I>>(base?: I): MsgPublishPayloadProofResponse {
    return MsgPublishPayloadProofResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishPayloadProofResponse>, I>>(_: I): MsgPublishPayloadProofResponse {
    const message = createBaseMsgPublishPayloadProofResponse();
    return message;
  },
};

function createBaseMsgRegisterContract(): MsgRegisterContract {
  return { owner: "", verifier: "", programId: new Uint8Array(0), stateDigest: new Uint8Array(0), contractName: "" };
}

export const MsgRegisterContract = {
  encode(message: MsgRegisterContract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.verifier !== "") {
      writer.uint32(18).string(message.verifier);
    }
    if (message.programId.length !== 0) {
      writer.uint32(26).bytes(message.programId);
    }
    if (message.stateDigest.length !== 0) {
      writer.uint32(34).bytes(message.stateDigest);
    }
    if (message.contractName !== "") {
      writer.uint32(42).string(message.contractName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterContract {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.verifier = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.programId = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stateDigest = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contractName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterContract {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      verifier: isSet(object.verifier) ? globalThis.String(object.verifier) : "",
      programId: isSet(object.programId) ? bytesFromBase64(object.programId) : new Uint8Array(0),
      stateDigest: isSet(object.stateDigest) ? bytesFromBase64(object.stateDigest) : new Uint8Array(0),
      contractName: isSet(object.contractName) ? globalThis.String(object.contractName) : "",
    };
  },

  toJSON(message: MsgRegisterContract): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.verifier !== "") {
      obj.verifier = message.verifier;
    }
    if (message.programId.length !== 0) {
      obj.programId = base64FromBytes(message.programId);
    }
    if (message.stateDigest.length !== 0) {
      obj.stateDigest = base64FromBytes(message.stateDigest);
    }
    if (message.contractName !== "") {
      obj.contractName = message.contractName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterContract>, I>>(base?: I): MsgRegisterContract {
    return MsgRegisterContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterContract>, I>>(object: I): MsgRegisterContract {
    const message = createBaseMsgRegisterContract();
    message.owner = object.owner ?? "";
    message.verifier = object.verifier ?? "";
    message.programId = object.programId ?? new Uint8Array(0);
    message.stateDigest = object.stateDigest ?? new Uint8Array(0);
    message.contractName = object.contractName ?? "";
    return message;
  },
};

function createBaseMsgRegisterContractResponse(): MsgRegisterContractResponse {
  return {};
}

export const MsgRegisterContractResponse = {
  encode(_: MsgRegisterContractResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterContractResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterContractResponse {
    return {};
  },

  toJSON(_: MsgRegisterContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterContractResponse>, I>>(base?: I): MsgRegisterContractResponse {
    return MsgRegisterContractResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterContractResponse>, I>>(_: I): MsgRegisterContractResponse {
    const message = createBaseMsgRegisterContractResponse();
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Msg {
  /** execute a zk-proven state change */
  PublishPayloads(request: MsgPublishPayloads): Promise<MsgPublishPayloadsResponse>;
  /** Verify a payload */
  PublishPayloadProof(request: MsgPublishPayloadProof): Promise<MsgPublishPayloadProofResponse>;
  /** RegisterContract registers a contract */
  RegisterContract(request: MsgRegisterContract): Promise<MsgRegisterContractResponse>;
}

export const MsgServiceName = "hyle.zktx.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.PublishPayloads = this.PublishPayloads.bind(this);
    this.PublishPayloadProof = this.PublishPayloadProof.bind(this);
    this.RegisterContract = this.RegisterContract.bind(this);
  }
  PublishPayloads(request: MsgPublishPayloads): Promise<MsgPublishPayloadsResponse> {
    const data = MsgPublishPayloads.encode(request).finish();
    const promise = this.rpc.request(this.service, "PublishPayloads", data);
    return promise.then((data) => MsgPublishPayloadsResponse.decode(_m0.Reader.create(data)));
  }

  PublishPayloadProof(request: MsgPublishPayloadProof): Promise<MsgPublishPayloadProofResponse> {
    const data = MsgPublishPayloadProof.encode(request).finish();
    const promise = this.rpc.request(this.service, "PublishPayloadProof", data);
    return promise.then((data) => MsgPublishPayloadProofResponse.decode(_m0.Reader.create(data)));
  }

  RegisterContract(request: MsgRegisterContract): Promise<MsgRegisterContractResponse> {
    const data = MsgRegisterContract.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterContract", data);
    return promise.then((data) => MsgRegisterContractResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
