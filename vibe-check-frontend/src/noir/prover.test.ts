import { expect, test } from "bun:test";
import { proveECDSA } from "./prover";

test(
    "ProveNoir",
    async () => {
        var webAuthnValues = {} as Record<string, Array<number> | number>;

        webAuthnValues.authenticator_data = [
            73,150,13,229,136,14,140,104,116,52,23,15,100,118,96,91,143,228,174,185,162,134,50,
            199,153,92,243,186,131,29,151,99,1,0,0,0,2,
        ];
        webAuthnValues.client_data_json = [
            123,34,116,121,112,101,34,58,34,119,101,98,97,117,116,104,110,46,103,101,116,34,44,
            34,99,104,97,108,108,101,110,103,101,34,58,34,77,68,69,121,77,122,81,49,78,106,99,
            52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,
            89,109,78,107,90,87,89,34,44,34,111,114,105,103,105,110,34,58,34,104,116,116,112,58,
            47,47,108,111,99,97,108,104,111,115,116,58,53,49,55,51,34,44,34,99,114,111,115,115,
            79,114,105,103,105,110,34,58,102,97,108,115,101,44,34,111,116,104,101,114,95,107,101,
            121,115,95,99,97,110,95,98,101,95,97,100,100,101,100,95,104,101,114,101,34,58,34,100,
            111,32,110,111,116,32,99,111,109,112,97,114,101,32,99,108,105,101,110,116,68,97,116,
            97,74,83,79,78,32,97,103,97,105,110,115,116,32,97,32,116,101,109,112,108,97,116,101,
            46,32,83,101,101,32,104,116,116,112,115,58,47,47,103,111,111,46,103,108,47,121,97,98,
            80,101,120,34,125,0,0,0,0,0,0,0,0,0,0,0,0,
        ];
        webAuthnValues.client_data_json_len = 243;
        webAuthnValues.challenge = [
            77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89
        ];
        webAuthnValues.signature = [
            82,136,74,32,153,235,109,67,71,39,174,40,236,10,148,216,10,252,148,19,65,199,207,33,
            122,154,152,207,227,211,239,123,236,124,59,127,176,148,235,95,146,201,223,167,251,36,
            163,12,230,141,240,220,181,29,197,75,58,240,217,223,93,40,215,77,
        ];
        webAuthnValues.pub_key_x = [
            10,139,43,102,182,222,131,127,94,44,137,46,114,246,188,198,153,38,51,220,104,189,146,
            100,20,183,186,135,40,241,63,90,
        ];
        webAuthnValues.pub_key_y = [
            248,109,104,228,138,216,189,114,45,18,108,136,174,69,16,115,225,68,38,193,19,153,45,
            106,117,46,233,180,209,239,182,202,
        ];

        const sign_s = BigInt(
            `0x${webAuthnValues.signature
                .slice(32)
                .map((x) => x.toString(16).padStart(2, "0"))
                .join("")}`,
        );
        let complement = BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551") - sign_s;
        const cms = complement.toString(16);
        // Convert complement to a uint8array in bigEndian
        const complement_bytes = [];
        for (let i = 0; i < 64; i += 2) {
            complement_bytes.push(parseInt(cms.slice(i, i + 2), 16));
        }
        webAuthnValues.signature = webAuthnValues.signature.slice(0, 32).concat(complement_bytes);
        expect(await proveECDSA(webAuthnValues)).toBeTruthy();
    },
    // Takes 13 seconds on my PC
    30 * 1000,
);
