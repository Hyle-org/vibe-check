{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":898019497483334968,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":56},"visibility":"public"},{"name":"tx_hash_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"tx_hash","type":{"kind":"array","length":0,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"payloads","type":{"kind":"array","length":2786,"type":{"kind":"field"}},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","file_map":{"1":{"source":"use crate::cmp::Ord;\n\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = self.get_sorting_index(ordering);\n        let mut result = self;\n        // Ensure the indexes are correct\n        for i in 0..N {\n            let pos = find_index(sorted_index, i);\n            assert(sorted_index[pos] == i);\n        }\n        // Sort the array using the indexes\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<N>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n","path":"std/array.nr"},"47":{"source":"use dep::std;\n\npub fn prefix_sha256_hash<N>(prefix_length: u8, input: [u8; N]) -> [u8; 32] {\n    let mut result = [0; 32];\n    assert([113, 114, 133, 134, 242, 243].any(|x| x == prefix_length), \"Length is not supported\");\n    if prefix_length == 113 {\n        result = std::hash::sha256(prefix(input, [0; 113]));\n    }\n    if prefix_length == 114 {\n        result = std::hash::sha256(prefix(input, [0; 114]));\n    }\n    if prefix_length == 133 {\n        result = std::hash::sha256(prefix(input, [0; 133]));\n    }\n    if prefix_length == 134 {\n        result = std::hash::sha256(prefix(input, [0; 134]));\n    }\n    if prefix_length == 242 {\n        result = std::hash::sha256(prefix(input, [0; 242]));\n    }\n    if prefix_length == 243 {\n        result = std::hash::sha256(prefix(input, [0; 243]));\n    }\n    result\n}\n\npub fn concatenate_arrays(a: [u8; 37], b: [u8; 32]) -> [u8; 69] {\n    let mut result = [0; 69];\n    for i in 0..37 {\n        result[i] = a[i];\n    }\n    for i in 0..32 {\n        result[i+37] = b[i];\n    }\n    result\n}\n\npub fn check_pubkey_matches_identity(pub_key_x: [u8; 32], pub_key_y: [u8; 32], identity: str<56>) {\n    // Compute the publickey as concatenation of pub_key_x and pub_key_y\n    let mut pub_key = [0; 64];\n    for i in 0..32 {\n        pub_key[i] = pub_key_x[i];\n        pub_key[i+32] = pub_key_y[i];\n    }\n    // Compute the address as the hash of the publickey\n    let address: [u8; 32] = std::hash::sha256(pub_key);\n\n    // identity is the last 20bytes of the address.\n    // Assert that there is a match between identity provided and identity computed from pubkeys\n    for k in 0..20 {\n        assert(address[12 + k] == identity.from_hex_to_uint_slice(2 * k, 2 * k + 2) as u8);\n    }\n}\n\nfn prefix<N, M>(input: [u8; N], mut result: [u8; M]) -> [u8; M] {\n    for i in 0..M {\n        result[i] = input[i];\n    }\n    result\n}\n\npub fn extract_array<N, M, T>(list: [T; N], start: u32, size: u32) -> [T; M]\n    where T: Default {\n    let mut result: [T; M] = [T::default(); M];\n    for i in 0..size {\n        result[i] = list[start + i];\n    }\n    result\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/utils.nr"},"48":{"source":"mod utils;\nmod payloads;\n\nuse dep::std;\nuse dep::std::println;\nuse crate::payloads::{parse_cairo_payloads, Payloads, WebAuthnPayload};\nuse crate::utils::{prefix_sha256_hash, concatenate_arrays, check_pubkey_matches_identity};\n\nfn main(\n    version: pub u32,\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    identity_len: pub u8,\n    identity: pub str<56>,\n    tx_hash_len: pub u32,\n    tx_hash: pub [u8; 0],\n    payloads: pub [Field; 2786],\n    success: pub bool\n) {\n    let (webauthn_payload, _smile_payload, _smile_token_payload) = parse_cairo_payloads(payloads);\n    let client_data_json_hash = prefix_sha256_hash(\n        webauthn_payload.client_data_json_len,\n        webauthn_payload.client_data_json\n    );\n    let concat = concatenate_arrays(webauthn_payload.authenticator_data, client_data_json_hash);\n    let hashed_data = std::hash::sha256(concat);\n\n    // Verifying pub_key matches the identity\n    check_pubkey_matches_identity(\n        webauthn_payload.pub_key_x,\n        webauthn_payload.pub_key_y,\n        identity\n    );\n\n    // Check the challenge\n    for i in 0..webauthn_payload.challenge.len() {\n        assert(webauthn_payload.challenge[i] == webauthn_payload.client_data_json[36 + i]);\n    }\n\n    let valid_signature = std::ecdsa_secp256r1::verify_signature(\n        webauthn_payload.pub_key_x,\n        webauthn_payload.pub_key_y,\n        webauthn_payload.signature,\n        hashed_data\n    );\n\n    assert(success == valid_signature);\n    assert(version == 1);\n    assert(tx_hash_len == 0);\n    assert(tx_hash == []);\n    assert(identity_len == 56);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_134() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"c59b18d3bdaccb4d689048559a9bb6e8265293bf.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n    let payloads: [Field; 2786] = [\n        2785,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        134,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201,\n        32,// pub_key_x\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26,\n        32,// pub_key_y\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        payloads,\n        success\n    );\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"3f368bf90c71946fc7b0cde9161ace42985d235f.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n    let payloads: [Field; 2786] = [\n        2785,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        243,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 44, 34, 111, 116, 104, 101, 114, 95, 107, 101, 121, 115, 95, 99, 97, 110, 95, 98, 101, 95, 97, 100, 100, 101, 100, 95, 104, 101, 114, 101, 34, 58, 34, 100, 111, 32, 110, 111, 116, 32, 99, 111, 109, 112, 97, 114, 101, 32, 99, 108, 105, 101, 110, 116, 68, 97, 116, 97, 74, 83, 79, 78, 32, 97, 103, 97, 105, 110, 115, 116, 32, 97, 32, 116, 101, 109, 112, 108, 97, 116, 101, 46, 32, 83, 101, 101, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 111, 111, 46, 103, 108, 47, 121, 97, 98, 80, 101, 120, 34, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        35, 9, 110, 138, 212, 71, 172, 124, 13, 7, 194, 158, 153, 63, 87, 67, 67, 25, 22, 122, 101, 253, 159, 175, 106, 50, 52, 157, 164, 70, 148, 46, 126, 152, 146, 190, 137, 37, 199, 95, 249, 115, 198, 94, 237, 198, 18, 23, 200, 185, 52, 157, 189, 205, 144, 63, 212, 29, 177, 20, 24, 255, 160, 127,\n        32,// pub_key_x\n        15, 206, 241, 12, 21, 160, 54, 11, 79, 72, 44, 109, 43, 45, 101, 54, 210, 243, 13, 236, 51, 33, 47, 66, 187, 38, 60, 249, 64, 70, 37, 252,\n        32,// pub_key_y\n        43, 221, 114, 86, 240, 184, 224, 51, 237, 41, 173, 85, 147, 130, 225, 150, 159, 150, 44, 23, 57, 92, 82, 37, 27, 40, 69, 123, 252, 224, 3, 197,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        payloads,\n        success\n    );\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243_bis() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"ae0e5100ea7d28905ce690194c0717cd93756a20.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n    let payloads: [Field; 2786] = [\n        2785,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        243,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 44, 34, 111, 116, 104, 101, 114, 95, 107, 101, 121, 115, 95, 99, 97, 110, 95, 98, 101, 95, 97, 100, 100, 101, 100, 95, 104, 101, 114, 101, 34, 58, 34, 100, 111, 32, 110, 111, 116, 32, 99, 111, 109, 112, 97, 114, 101, 32, 99, 108, 105, 101, 110, 116, 68, 97, 116, 97, 74, 83, 79, 78, 32, 97, 103, 97, 105, 110, 115, 116, 32, 97, 32, 116, 101, 109, 112, 108, 97, 116, 101, 46, 32, 83, 101, 101, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 111, 111, 46, 103, 108, 47, 121, 97, 98, 80, 101, 120, 34, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        216, 184, 64, 61, 79, 81, 150, 39, 72, 191, 167, 234, 52, 253, 225, 66, 52, 192, 76, 159, 65, 164, 134, 34, 212, 255, 104, 99, 14, 53, 71, 115, 0, 190, 96, 135, 49, 186, 213, 189, 93, 36, 212, 143, 36, 92, 27, 42, 44, 103, 95, 153, 46, 59, 158, 22, 223, 196, 84, 102, 51, 209, 135, 233,\n        32,// pub_key_x\n        35, 250, 194, 235, 47, 86, 159, 70, 36, 137, 145, 195, 83, 245, 203, 137, 12, 28, 43, 171, 167, 226, 44, 90, 199, 107, 235, 0, 229, 229, 133, 67,\n        32,// pub_key_y\n        84, 107, 152, 100, 72, 140, 98, 57, 186, 30, 76, 187, 129, 194, 209, 158, 96, 37, 254, 211, 60, 198, 27, 227, 167, 247, 204, 51, 145, 53, 120, 95,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        payloads,\n        success\n    );\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/main.nr"},"49":{"source":"use crate::utils::extract_array;\n\nglobal CLIENT_DATA_JSON_LEN = 255;\n\nstruct WebAuthnPayload {\n    authenticator_data: [u8; 37],\n    client_data_json_len: u8,\n    client_data_json: [u8; CLIENT_DATA_JSON_LEN],\n    challenge: [u8; 43],\n    signature: [u8; 64],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n}\n\nstruct Payloads {\n    webauthn: WebAuthnPayload,\n    smile:[u8; 1],\n    smile_token:[u8; 1]\n}\n\nfn parse_webauthn_cairo_payload(cairo_payload: [Field; 471]) -> WebAuthnPayload {\n    // Checking overall size is correct\n    let webauthn_cairo_payload_len = cairo_payload[0];\n    assert(webauthn_cairo_payload_len == 470);\n\n    // Casting from Field to u8\n    let mut webauthn_cairo_payload: [u8; 470] = [0; 470];\n    for i in 0..470 {\n        webauthn_cairo_payload[i] = cairo_payload[i+1] as u8;\n    }\n\n    // Initialize counter\n    let mut n = 0;\n\n    // authenticator_data\n    let authenticator_data_len = webauthn_cairo_payload[n];\n    n = n + 1;\n    assert(authenticator_data_len == 37);\n    let authenticator_data = extract_array(webauthn_cairo_payload, n, 37);\n    n = n + authenticator_data_len as u32;\n\n    // client_data_json\n    let client_data_json_len = webauthn_cairo_payload[n];\n    n = n + 1 + 1; // Adding extra +1 for CLIENT_DATA_JSON_LEN value\n    let client_data_json = extract_array(webauthn_cairo_payload, n, CLIENT_DATA_JSON_LEN);\n    n = n + CLIENT_DATA_JSON_LEN;\n\n    // challenge\n    let challenge_len = webauthn_cairo_payload[n];\n    n = n + 1;\n    assert(challenge_len == 43);\n    let challenge = extract_array(webauthn_cairo_payload, n, 43);\n    n = n + challenge_len as u32;\n\n    // signature\n    let signature_len = webauthn_cairo_payload[n];\n    n = n + 1;\n    assert(signature_len == 64);\n    let signature = extract_array(webauthn_cairo_payload, n, 64);\n    n = n + signature_len as u32;\n\n    // pub_key_x\n    let pub_key_x_len = webauthn_cairo_payload[n];\n    n = n + 1;\n    assert(pub_key_x_len == 32);\n    let pub_key_x = extract_array(webauthn_cairo_payload, n, 32);\n    n = n + pub_key_x_len as u32;\n\n    // pub_key_y\n    let pub_key_y_len = webauthn_cairo_payload[n];\n    n = n + 1;\n    assert(pub_key_y_len == 32);\n    let pub_key_y = extract_array(webauthn_cairo_payload, n, 32);\n    n = n + pub_key_y_len as u32;\n\n    let webauthn_payload : WebAuthnPayload = WebAuthnPayload { authenticator_data, client_data_json_len, client_data_json, challenge, signature, pub_key_x, pub_key_y };\n    webauthn_payload\n}\n\npub fn parse_cairo_payloads(payloads: [Field; 2786]) -> (WebAuthnPayload, [Field; 2305], [Field; 9]) {\n    let mut n = 0;\n    assert(payloads[n] == 2785);\n    n = n + 1;\n\n    // webauthn_payload\n    let webauthn_len = payloads[n];\n    assert(webauthn_len == 470);\n    let webauthn_cairo_payload = extract_array(payloads, n as u32, 1 + 470 as u32);\n    let webauthn_payload = parse_webauthn_cairo_payload(webauthn_cairo_payload);\n    n = n + webauthn_len + 1;\n\n    // smile_payload\n    let smile_payload_len = payloads[n];\n    assert(smile_payload_len == 2304);\n    let smile_payload = extract_array(payloads, n as u32, 1 + 2304 as u32);\n    n = n + smile_payload_len + 1;\n\n    // smile_token_payload\n    let smile_token_payload_len = payloads[n];\n    assert(smile_token_payload_len == 8);\n    let smile_token_payload = extract_array(payloads, n as u32, 1 + 8 as u32);\n\n    (webauthn_payload, smile_payload, smile_token_payload)\n}\n\n#[test]\nfn test_parse_webauthn_payload() {\n    let webauthn_cairo_payload: [Field; 471] = [\n        470,\n        37,\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        134,\n        255,\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201,\n        32,\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26,\n        32,\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    let webauthn_payload = parse_webauthn_cairo_payload(webauthn_cairo_payload);\n\n    let authenticator_data = [\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2\n    ];\n    let client_data_json = [\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// Padding with 121 zeros (134+121 = 255) \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let challenge = [\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89\n    ];\n    let signature = [\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201\n    ];\n    let pub_key_x = [\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26\n    ];\n    let pub_key_y = [\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    assert(webauthn_payload.authenticator_data == authenticator_data);\n    assert(webauthn_payload.client_data_json == client_data_json);\n    assert(webauthn_payload.challenge == challenge);\n    assert(webauthn_payload.signature == signature);\n    assert(webauthn_payload.pub_key_x == pub_key_x);\n    assert(webauthn_payload.pub_key_y == pub_key_y);\n}\n\n#[test]\nfn test_parse_payloads() {\n    let payloads: [Field; 2786] = [\n        2785,\n        470,\n        37, 73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2, 134, 255, 123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 64, 80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201, 32, 201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26, 32, 169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100\n    ];\n    let (webauthn_payload, smile_payload, smile_token_payload) = parse_cairo_payloads(payloads);\n\n    assert(\n        smile_token_payload == [\n            8, 0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100\n        ]\n    );\n    assert(\n        smile_payload == [\n            2304, 46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118\n        ]\n    );\n\n    let authenticator_data = [\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2\n    ];\n    let client_data_json = [\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// Padding with 121 zeros (134+121 = 255) \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let challenge = [\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89\n    ];\n    let signature = [\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201\n    ];\n    let pub_key_x = [\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26\n    ];\n    let pub_key_y = [\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    assert(webauthn_payload.authenticator_data == authenticator_data);\n    assert(webauthn_payload.client_data_json == client_data_json);\n    assert(webauthn_payload.challenge == challenge);\n    assert(webauthn_payload.signature == signature);\n    assert(webauthn_payload.pub_key_x == pub_key_x);\n    assert(webauthn_payload.pub_key_y == pub_key_y);\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/payloads.nr"},"50":{"source":"use dep::std::println;\n\nglobal UPPERCASE_A_INDEX: u8 = 65;\nglobal UPPERCASE_Z_INDEX: u8 = 90;\nglobal LOWERCASE_A_INDEX: u8 = 97;\nglobal LOWERCASE_Z_INDEX: u8 = 122;\nglobal ZERO_INDEX: u8 = 48;\nglobal NINE_INDEX: u8 = 57;\nglobal ASCII_TABLE_START_INDEX: u8 = 0;\nglobal SORTED_ASCII_TABLE: [str<1>; 127] = [    \n    \"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\t\",\"\\n\",\"\\0\",\"\\0\",\"\\r\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\n    \" \",\"!\",\"\\\"\",\"#\",\"$\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\n    \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n    \":\",\";\",\"<\",\"=\",\">\",\"?\",\"@\",\n    \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n    \"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\n    \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n    \"{\",\"|\",\"}\",\"~\"\n];\n\n// Functions \nfn code_at<N>(s: str<N>, index: u64) -> u8 {\n    assert(index < N);\n    s.as_bytes()[index]\n}\n\nfn char_at<N>(s: str<N>, index: u64) -> str<1> {\n    let byte = code_at(s, index);\n    let ascii_index = byte - ASCII_TABLE_START_INDEX;\n    SORTED_ASCII_TABLE[ascii_index]\n}\n\nfn index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            index = i as i64;\n            match_count += 1;\n        } else if (index != -1) & (i - index < M) {\n            if (str_bytes[i] != substr_bytes[i - index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    // If the match count is not equal to the length of the substring,\n    // then the substring is not in the string\n    // Can happen when looking at a substring that is at the end of the string\n    // but the match is only partial\n    if match_count != M {\n        index = -1;\n    }\n\n    index\n}\n\nfn last_index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    let mut final_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            final_index = temp_index;\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        final_index = temp_index;\n    }\n\n    final_index\n}\n\n// We use Field instead of integers for the Vector here as integers \n// don't seem to work well with Vectors at the moment\nfn indexes_of<N, M>(s: str<N>, substr: str<M>) -> Vec<Field> {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut indexes: Vec<Field> = Vec::new();\n    for i in 0..N {\n        if (match_count == M) {\n            indexes.push(temp_index as Field);\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        indexes.push(temp_index as Field);\n    }\n\n    indexes\n}\n\nfn contains<N, M>(s: str<N>, substr: str<M>) -> bool {\n    index_of(s, substr) != -1\n}\n\nfn occurrences_of<N, M>(s: str<N>, substr: str<M>) -> u64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut occurrences = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            temp_index = -1;\n            match_count = 0;\n            occurrences += 1;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        occurrences += 1;\n    }\n\n    occurrences\n}\n\nfn digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    assert((byte >= ZERO_INDEX) & (byte <= NINE_INDEX), \"Character is not a digit\");\n    byte - ZERO_INDEX\n}\n\nfn hex_digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    if (byte >= ZERO_INDEX) & (byte <= NINE_INDEX) {\n        byte - ZERO_INDEX\n    } else if (byte >= UPPERCASE_A_INDEX) & (byte <= UPPERCASE_Z_INDEX) {\n        byte - UPPERCASE_A_INDEX + 10\n    } else if (byte >= LOWERCASE_A_INDEX) & (byte <= LOWERCASE_Z_INDEX) {\n        byte - LOWERCASE_A_INDEX + 10\n    } else {\n        assert(false, \"Character is not a hex digit\");\n        0\n    }\n}\n\nfn to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = digit_at(s, i);\n        result = result * 10 + digit as u64;\n    }\n    result\n}\n\nfn to_uint<N>(s: str<N>) -> u64 {\n    to_uint_slice(s, 0, N)\n}\n\nfn to_int<N>(s: str<N>) -> i64 {\n    if char_at(s, 0) == \"-\" {\n        -1 * to_uint_slice(s, 1, N) as i64\n    } else {\n        to_uint_slice(s, 0, N) as i64\n    }\n}\n\nfn from_hex_to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = hex_digit_at(s, i);\n        result = result * 16 + digit as u64;\n    }\n    result\n}\n\nfn from_hex_to_uint<N>(s: str<N>, with_prefix: bool) -> u64 {\n    if with_prefix {\n        from_hex_to_uint_slice(s, 2, N)\n    } else {\n        from_hex_to_uint_slice(s, 0, N)\n    }\n}\n\nfn to_array_of_chars<N>(s: str<N>) -> [str<1>; N] {\n    let mut result: [str<1>; N] = [\" \"; N];\n    for i in 0..N {\n        result[i] = char_at(s, i);\n    }\n    result\n}\n\n// Struct\n\nstruct String<N> {\n    value: str<N>,\n    len: u64,\n}\n\n// Implementation over String struct\n\nimpl<N> String<N> {\n    fn new(value: str<N>) -> Self {\n        Self { value, len: N }\n    }\n\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self.value, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self.value, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self.value, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self.value, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self.value, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self.value, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self.value, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self.value, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self.value, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self.value, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self.value, 0, self.len)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self.value)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self.value, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self.value, with_prefix)\n    }\n\n    fn to_array_of_chars(self: Self) -> [str<1>; N] {\n        to_array_of_chars(self.value)\n    }\n}\n\n// Trait\ntrait StringTrait {\n    fn code_at(self, index: u64) -> u8;\n    fn char_at(self, index: u64) -> str<1>;\n    fn index_of<M>(self, substr: str<M>) -> i64;\n    fn last_index_of<M>(self, c: str<M>) -> i64;\n    fn indexes_of<M>(self, c: str<M>) -> Vec<Field>;\n    fn contains<M>(self, substr: str<M>) -> bool;\n    fn occurrences_of<M>(self, c: str<M>) -> u64;\n    fn digit_at(self, index: u64) -> u8;\n    fn hex_digit_at(self, index: u64) -> u8;\n    fn to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn to_uint(self) -> u64;\n    fn to_int(self) -> i64;\n    fn from_hex_to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn from_hex_to_uint(self, with_prefix: bool) -> u64;\n}\n\n// Implementation for str type\nimpl<N> StringTrait for str<N> {\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self, 0, N)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self, with_prefix)\n    }\n}\n\n// Tests for String struct\n#[test]\nfn test_init() {\n    let s = String::new(\"hello\");\n    assert(s.len == 5);\n    assert(s.value == \"hello\");\n}\n\n#[test]\nfn test_char_at() {\n    let s = String::new(\"hello\");\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_code_at() {\n    let s = String::new(\"hello\");\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_index_of() {\n    let s = String::new(\"hello\");\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_last_index_of() {\n    let s = String::new(\"hello\");\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_indexes_of() {\n    let s = String::new(\"hello\");\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_contains() {\n    let s = String::new(\"hello\");\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_occurrences_of() {\n    let s = String::new(\"hello\");\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_digit_at() {\n    let s = String::new(\"20231219\");\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_hex_digit_at() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_to_uint() {\n    let s = String::new(\"20231219\");\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_to_int() {\n    let s = String::new(\"-25\");\n    assert(s.to_int() == -25);\n\n    let s = String::new(\"25\");\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_to_uint_slice() {\n    let s = String::new(\"2023/12/19\");\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_from_hex_to_uint_slice() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_from_hex_to_uint() {\n    let uppercase_hex = String::new(\"0x1324ABCDEF\");\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = String::new(\"0x1234abcdef\");\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = String::new(\"1234abcdef\");\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = String::new(\"0x000001\");\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n\n#[test]\nfn test_to_array_of_chars() {\n    let s = String::new(\"hello\");\n    let arr = s.to_array_of_chars();\n    assert(arr[0] == \"h\");\n    assert(arr[1] == \"e\");\n    assert(arr[2] == \"l\");\n    assert(arr[3] == \"l\");\n    assert(arr[4] == \"o\");\n}\n\n// Tests for String trait\n#[test]\nfn test_trait_char_at() {\n    let s = \"hello\";\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_trait_code_at() {\n    let s = \"hello\";\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_trait_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_trait_last_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_trait_indexes_of() {\n    let s = \"hello\";\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_trait_contains() {\n    let s = \"hello\";\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_trait_occurrences_of() {\n    let s = \"hello\";\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_trait_digit_at() {\n    let s = \"20231219\";\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_trait_hex_digit_at() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_trait_to_uint() {\n    let s = \"20231219\";\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_trait_to_int() {\n    let s = \"-25\";\n    assert(s.to_int() == -25);\n\n    let s = \"25\";\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_trait_to_uint_slice() {\n    let s = \"2023/12/19\";\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint_slice() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint() {\n    let uppercase_hex = \"0x1324ABCDEF\";\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = \"0x1234abcdef\";\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = \"1234abcdef\";\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = \"0x000001\";\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n","path":"/home/maximilien/nargo/github.com/madztheo/noir-string-utils.gitmain/src/lib.nr"}},"names":["main"]}