{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":7418529537652310767,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":56},"visibility":"public"},{"name":"tx_hash_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"tx_hash","type":{"kind":"array","length":0,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blobs_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob","type":{"kind":"array","length":2800,"type":{"kind":"field"}},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"1":{"source":"use crate::cmp::Ord;\n\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = self.get_sorting_index(ordering);\n        let mut result = self;\n        // Ensure the indexes are correct\n        for i in 0..N {\n            let pos = find_index(sorted_index, i);\n            assert(sorted_index[pos] == i);\n        }\n        // Sort the array using the indexes\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<N>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n","path":"std/array.nr"},"47":{"source":"use crate::utils::extract_array;\n\nglobal CLIENT_DATA_JSON_LEN = 255;\n\nstruct WebAuthnBlob {\n    authenticator_data: [u8; 37],\n    client_data_json_len: u8,\n    client_data_json: [u8; CLIENT_DATA_JSON_LEN],\n    challenge: [u8; 43],\n    signature: [u8; 64],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n}\n\nstruct Blobs {\n    webauthn: WebAuthnBlob,\n    smile:[u8; 1],\n    smile_token:[u8; 1]\n}\n\nfn parse_webauthn_cairo_blob(cairo_blob: [Field; 471]) -> WebAuthnBlob {\n    // Checking overall size is correct\n    let webauthn_cairo_blob_len = cairo_blob[0];\n    assert(webauthn_cairo_blob_len == 470);\n\n    // Casting from Field to u8\n    let mut webauthn_cairo_blob: [u8; 470] = [0; 470];\n    for i in 0..470 {\n        webauthn_cairo_blob[i] = cairo_blob[i+1] as u8;\n    }\n\n    // Initialize counter\n    let mut n = 0;\n\n    // authenticator_data\n    let authenticator_data_len = webauthn_cairo_blob[n];\n    n = n + 1;\n    assert(authenticator_data_len == 37);\n    let authenticator_data = extract_array(webauthn_cairo_blob, n, 37);\n    n = n + authenticator_data_len as u32;\n\n    // client_data_json\n    let client_data_json_len = webauthn_cairo_blob[n];\n    n = n + 1 + 1; // Adding extra +1 for CLIENT_DATA_JSON_LEN value\n    let client_data_json = extract_array(webauthn_cairo_blob, n, CLIENT_DATA_JSON_LEN);\n    n = n + CLIENT_DATA_JSON_LEN;\n\n    // challenge\n    let challenge_len = webauthn_cairo_blob[n];\n    n = n + 1;\n    assert(challenge_len == 43);\n    let challenge = extract_array(webauthn_cairo_blob, n, 43);\n    n = n + challenge_len as u32;\n\n    // signature\n    let signature_len = webauthn_cairo_blob[n];\n    n = n + 1;\n    assert(signature_len == 64);\n    let signature = extract_array(webauthn_cairo_blob, n, 64);\n    n = n + signature_len as u32;\n\n    // pub_key_x\n    let pub_key_x_len = webauthn_cairo_blob[n];\n    n = n + 1;\n    assert(pub_key_x_len == 32);\n    let pub_key_x = extract_array(webauthn_cairo_blob, n, 32);\n    n = n + pub_key_x_len as u32;\n\n    // pub_key_y\n    let pub_key_y_len = webauthn_cairo_blob[n];\n    n = n + 1;\n    assert(pub_key_y_len == 32);\n    let pub_key_y = extract_array(webauthn_cairo_blob, n, 32);\n    n = n + pub_key_y_len as u32;\n\n    let webauthn_blob : WebAuthnBlob = WebAuthnBlob { authenticator_data, client_data_json_len, client_data_json, challenge, signature, pub_key_x, pub_key_y };\n    webauthn_blob\n}\n\npub fn parse_cairo_blobs(index: u32, blobs: [Field; 2800]) -> WebAuthnBlob {\n    // TODO: take into account the index to select correct blob\n    assert(index == 0);\n    // First value of blobs is the number of blob contained\n    let mut n = 1;\n\n    // webauthn_blob\n    let webauthn_len = blobs[n];\n    assert(webauthn_len == 470);\n    let webauthn_cairo_blob = extract_array(blobs, n as u32, 1 + 470 as u32);\n    let webauthn_blob = parse_webauthn_cairo_blob(webauthn_cairo_blob);\n    n = n + webauthn_len + 1;\n\n    webauthn_blob\n}\n\n#[test]\nfn test_parse_webauthn_blob() {\n    let webauthn_cairo_blob: [Field; 471] = [\n        470,\n        37,\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        134,\n        255,\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201,\n        32,\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26,\n        32,\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    let webauthn_blob = parse_webauthn_cairo_blob(webauthn_cairo_blob);\n\n    let authenticator_data = [\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2\n    ];\n    let client_data_json = [\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// Padding with 121 zeros (134+121 = 255) \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let challenge = [\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89\n    ];\n    let signature = [\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201\n    ];\n    let pub_key_x = [\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26\n    ];\n    let pub_key_y = [\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    assert(webauthn_blob.authenticator_data == authenticator_data);\n    assert(webauthn_blob.client_data_json == client_data_json);\n    assert(webauthn_blob.challenge == challenge);\n    assert(webauthn_blob.signature == signature);\n    assert(webauthn_blob.pub_key_x == pub_key_x);\n    assert(webauthn_blob.pub_key_y == pub_key_y);\n}\n\n#[test]\nfn test_parse_blobs() {\n    let blobs: [Field; 2800] = [\n        3,\n        470,\n        37, 73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2, 134, 255, 123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 64, 80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201, 32, 201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26, 32, 169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let webauthn_blob = parse_cairo_blobs(0, blobs);\n\n    let authenticator_data = [\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2\n    ];\n    let client_data_json = [\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// Padding with 121 zeros (134+121 = 255) \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let challenge = [\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89\n    ];\n    let signature = [\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201\n    ];\n    let pub_key_x = [\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26\n    ];\n    let pub_key_y = [\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83\n    ];\n    assert(webauthn_blob.authenticator_data == authenticator_data);\n    assert(webauthn_blob.client_data_json == client_data_json);\n    assert(webauthn_blob.challenge == challenge);\n    assert(webauthn_blob.signature == signature);\n    assert(webauthn_blob.pub_key_x == pub_key_x);\n    assert(webauthn_blob.pub_key_y == pub_key_y);\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/blobs.nr"},"48":{"source":"use dep::std;\n\npub fn prefix_sha256_hash<N>(prefix_length: u8, input: [u8; N]) -> [u8; 32] {\n    let mut result = [0; 32];\n    assert([113, 114, 133, 134, 242, 243].any(|x| x == prefix_length), \"Length is not supported\");\n    if prefix_length == 113 {\n        result = std::hash::sha256(prefix(input, [0; 113]));\n    }\n    if prefix_length == 114 {\n        result = std::hash::sha256(prefix(input, [0; 114]));\n    }\n    if prefix_length == 133 {\n        result = std::hash::sha256(prefix(input, [0; 133]));\n    }\n    if prefix_length == 134 {\n        result = std::hash::sha256(prefix(input, [0; 134]));\n    }\n    if prefix_length == 242 {\n        result = std::hash::sha256(prefix(input, [0; 242]));\n    }\n    if prefix_length == 243 {\n        result = std::hash::sha256(prefix(input, [0; 243]));\n    }\n    result\n}\n\npub fn concatenate_arrays(a: [u8; 37], b: [u8; 32]) -> [u8; 69] {\n    let mut result = [0; 69];\n    for i in 0..37 {\n        result[i] = a[i];\n    }\n    for i in 0..32 {\n        result[i+37] = b[i];\n    }\n    result\n}\n\npub fn check_pubkey_matches_identity(pub_key_x: [u8; 32], pub_key_y: [u8; 32], identity: str<56>) {\n    // Compute the publickey as concatenation of pub_key_x and pub_key_y\n    let mut pub_key = [0; 64];\n    for i in 0..32 {\n        pub_key[i] = pub_key_x[i];\n        pub_key[i+32] = pub_key_y[i];\n    }\n    // Compute the address as the hash of the publickey\n    let address: [u8; 32] = std::hash::sha256(pub_key);\n\n    // identity is the last 20bytes of the address.\n    // Assert that there is a match between identity provided and identity computed from pubkeys\n    for k in 0..20 {\n        assert(address[12 + k] == identity.from_hex_to_uint_slice(2 * k, 2 * k + 2) as u8);\n    }\n}\n\nfn prefix<N, M>(input: [u8; N], mut result: [u8; M]) -> [u8; M] {\n    for i in 0..M {\n        result[i] = input[i];\n    }\n    result\n}\n\npub fn extract_array<N, M, T>(list: [T; N], start: u32, size: u32) -> [T; M]\n    where T: Default {\n    let mut result: [T; M] = [T::default(); M];\n    for i in 0..size {\n        result[i] = list[start + i];\n    }\n    result\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/utils.nr"},"49":{"source":"mod utils;\nmod blobs;\n\nuse dep::std;\nuse dep::std::println;\nuse crate::blobs::{parse_cairo_blobs, Blobs, WebAuthnBlob};\nuse crate::utils::{prefix_sha256_hash, concatenate_arrays, check_pubkey_matches_identity};\n\nfn main(\n    version: pub u32,\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    identity_len: pub u8,\n    identity: pub str<56>,\n    tx_hash_len: pub u32,\n    tx_hash: pub [u8; 0],\n    index: pub u32,\n    blobs_len: pub u32,\n    blob: pub [Field; 2800],\n    success: pub bool\n) {\n    let webauthn_blob = parse_cairo_blobs(index, blob);\n    let client_data_json_hash = prefix_sha256_hash(\n        webauthn_blob.client_data_json_len,\n        webauthn_blob.client_data_json\n    );\n    let concat = concatenate_arrays(webauthn_blob.authenticator_data, client_data_json_hash);\n    let hashed_data = std::hash::sha256(concat);\n\n    // Verifying pub_key matches the identity\n    check_pubkey_matches_identity(webauthn_blob.pub_key_x, webauthn_blob.pub_key_y, identity);\n\n    // Check the challenge\n    for i in 0..webauthn_blob.challenge.len() {\n        assert(webauthn_blob.challenge[i] == webauthn_blob.client_data_json[36 + i]);\n    }\n\n    let valid_signature = std::ecdsa_secp256r1::verify_signature(\n        webauthn_blob.pub_key_x,\n        webauthn_blob.pub_key_y,\n        webauthn_blob.signature,\n        hashed_data\n    );\n\n    assert(success == valid_signature);\n    assert(version == 1);\n    assert(tx_hash_len == 0);\n    assert(tx_hash == []);\n    assert(identity_len == 56);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_134() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"c59b18d3bdaccb4d689048559a9bb6e8265293bf.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n\n    let index = 0;\n    let blobs_len = 2800;\n\n    let blob: [Field; 2800] = [\n        3,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        134,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        80, 114, 197, 245, 128, 150, 206, 160, 135, 105, 51, 205, 42, 143, 25, 53, 119, 97, 166, 196, 95, 98, 53, 63, 168, 171, 63, 85, 41, 42, 196, 134, 26, 198, 126, 179, 109, 99, 41, 92, 86, 45, 240, 238, 196, 106, 77, 219, 146, 196, 183, 80, 225, 170, 66, 218, 169, 244, 230, 252, 61, 213, 29, 201,\n        32,// pub_key_x\n        201, 91, 99, 172, 65, 154, 80, 154, 189, 195, 194, 210, 62, 219, 224, 36, 43, 134, 143, 236, 137, 178, 121, 35, 112, 146, 103, 238, 37, 100, 145, 26,\n        32,// pub_key_y\n        169, 8, 63, 83, 58, 93, 192, 39, 114, 115, 138, 176, 56, 254, 162, 127, 93, 19, 156, 93, 51, 9, 194, 161, 253, 10, 203, 128, 171, 254, 255, 83,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        index,\n        blobs_len,\n        blob,\n        success\n    );\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"3f368bf90c71946fc7b0cde9161ace42985d235f.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n\n    let index = 0;\n    let blobs_len = 2800;\n\n    let blob: [Field; 2800] = [\n        3,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        243,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 44, 34, 111, 116, 104, 101, 114, 95, 107, 101, 121, 115, 95, 99, 97, 110, 95, 98, 101, 95, 97, 100, 100, 101, 100, 95, 104, 101, 114, 101, 34, 58, 34, 100, 111, 32, 110, 111, 116, 32, 99, 111, 109, 112, 97, 114, 101, 32, 99, 108, 105, 101, 110, 116, 68, 97, 116, 97, 74, 83, 79, 78, 32, 97, 103, 97, 105, 110, 115, 116, 32, 97, 32, 116, 101, 109, 112, 108, 97, 116, 101, 46, 32, 83, 101, 101, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 111, 111, 46, 103, 108, 47, 121, 97, 98, 80, 101, 120, 34, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        35, 9, 110, 138, 212, 71, 172, 124, 13, 7, 194, 158, 153, 63, 87, 67, 67, 25, 22, 122, 101, 253, 159, 175, 106, 50, 52, 157, 164, 70, 148, 46, 126, 152, 146, 190, 137, 37, 199, 95, 249, 115, 198, 94, 237, 198, 18, 23, 200, 185, 52, 157, 189, 205, 144, 63, 212, 29, 177, 20, 24, 255, 160, 127,\n        32,// pub_key_x\n        15, 206, 241, 12, 21, 160, 54, 11, 79, 72, 44, 109, 43, 45, 101, 54, 210, 243, 13, 236, 51, 33, 47, 66, 187, 38, 60, 249, 64, 70, 37, 252,\n        32,// pub_key_y\n        43, 221, 114, 86, 240, 184, 224, 51, 237, 41, 173, 85, 147, 130, 225, 150, 159, 150, 44, 23, 57, 92, 82, 37, 27, 40, 69, 123, 252, 224, 3, 197,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        index,\n        blobs_len,\n        blob,\n        success\n    );\n}\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243_bis() {\n    let version = 1;\n    let initial_state_len = 4;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 4;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"ae0e5100ea7d28905ce690194c0717cd93756a20.ecdsa_secp256r1\";\n    let tx_hash_len = 0;\n    let tx_hash = [];\n\n    let index = 0;\n    let blobs_len = 2800;\n\n    let blob: [Field; 2800] = [\n        3,\n        470,\n        37,// authenticator_data\n        73, 150, 13, 229, 136, 14, 140, 104, 116, 52, 23, 15, 100, 118, 96, 91, 143, 228, 174, 185, 162, 134, 50, 199, 153, 92, 243, 186, 131, 29, 151, 99, 1, 0, 0, 0, 2,\n        243,// client_data_json_len\n        255,// client_data_json\n        123, 34, 116, 121, 112, 101, 34, 58, 34, 119, 101, 98, 97, 117, 116, 104, 110, 46, 103, 101, 116, 34, 44, 34, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 58, 34, 77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89, 34, 44, 34, 111, 114, 105, 103, 105, 110, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 53, 49, 55, 51, 34, 44, 34, 99, 114, 111, 115, 115, 79, 114, 105, 103, 105, 110, 34, 58, 102, 97, 108, 115, 101, 44, 34, 111, 116, 104, 101, 114, 95, 107, 101, 121, 115, 95, 99, 97, 110, 95, 98, 101, 95, 97, 100, 100, 101, 100, 95, 104, 101, 114, 101, 34, 58, 34, 100, 111, 32, 110, 111, 116, 32, 99, 111, 109, 112, 97, 114, 101, 32, 99, 108, 105, 101, 110, 116, 68, 97, 116, 97, 74, 83, 79, 78, 32, 97, 103, 97, 105, 110, 115, 116, 32, 97, 32, 116, 101, 109, 112, 108, 97, 116, 101, 46, 32, 83, 101, 101, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 111, 111, 46, 103, 108, 47, 121, 97, 98, 80, 101, 120, 34, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        43,// challenge\n        77, 68, 69, 121, 77, 122, 81, 49, 78, 106, 99, 52, 79, 87, 70, 105, 89, 50, 82, 108, 90, 106, 65, 120, 77, 106, 77, 48, 78, 84, 89, 51, 79, 68, 108, 104, 89, 109, 78, 107, 90, 87, 89,\n        64,// signature\n        216, 184, 64, 61, 79, 81, 150, 39, 72, 191, 167, 234, 52, 253, 225, 66, 52, 192, 76, 159, 65, 164, 134, 34, 212, 255, 104, 99, 14, 53, 71, 115, 0, 190, 96, 135, 49, 186, 213, 189, 93, 36, 212, 143, 36, 92, 27, 42, 44, 103, 95, 153, 46, 59, 158, 22, 223, 196, 84, 102, 51, 209, 135, 233,\n        32,// pub_key_x\n        35, 250, 194, 235, 47, 86, 159, 70, 36, 137, 145, 195, 83, 245, 203, 137, 12, 28, 43, 171, 167, 226, 44, 90, 199, 107, 235, 0, 229, 229, 133, 67,\n        32,// pub_key_y\n        84, 107, 152, 100, 72, 140, 98, 57, 186, 30, 76, 187, 129, 194, 209, 158, 96, 37, 254, 211, 60, 198, 27, 227, 167, 247, 204, 51, 145, 53, 120, 95,\n        2304,\n        46278, 46086, 45667, 33937, 6969, 6576, 6067, 12518, 22098, 22063, 26851, 26596, 25894, 25420, 25502, 25976, 26424, 26169, 27035, 27902, 27957, 27929, 29106, 29745, 29745, 31678, 34067, 35016, 36447, 36027, 32388, 63047, 63082, 55004, 45584, 48741, 51157, 52114, 50490, 48584, 30588, 12353, 10318, 10290, 13627, 18306, 18608, 19310, 41282, 40106, 40671, 11267, 7106, 5792, 5929, 21192, 25765, 26486, 27380, 26843, 26843, 26451, 26169, 26251, 26898, 27200, 27957, 28851, 28431, 28824, 30475, 31204, 31286, 32216, 34039, 35827, 36639, 35827, 32533, 52694, 65725, 57902, 45529, 47875, 50847, 51439, 51667, 51357, 49769, 15792, 10427, 10180, 13765, 17012, 21635, 33043, 41392, 39514, 42596, 5722, 6294, 5902, 9306, 23529, 24161, 26961, 26651, 26086, 25776, 26169, 26506, 27200, 28459, 29298, 30502, 31596, 31176, 31988, 32463, 33110, 31149, 32016, 34039, 34733, 36137, 35773, 40824, 48855, 49475, 52102, 46039, 48357, 49871, 50992, 51529, 51667, 52314, 18557, 13702, 11439, 11886, 15780, 28557, 30518, 45259, 45286, 31086, 6286, 5820, 6486, 16804, 22635, 25729, 26878, 26878, 26369, 25776, 26169, 27035, 27984, 29024, 30392, 32016, 33867, 33976, 34369, 34733, 35043, 32800, 32800, 35408, 36192, 36165, 36192, 43341, 43129, 44369, 50298, 46149, 48102, 49506, 49624, 51612, 53125, 53800, 39635, 17251, 18490, 19337, 27125, 41133, 56318, 44502, 45122, 20278, 6988, 6184, 8584, 17553, 25208, 25702, 26878, 26569, 26369, 26451, 26169, 27592, 27592, 28459, 30867, 32435, 33976, 35435, 36776, 37733, 36275, 34624, 32800, 33420, 35016, 35298, 34286, 45529, 44251, 48545, 48027, 45584, 47153, 48694, 49286, 51137, 54412, 55286, 45737, 19541, 18435, 22365, 27882, 45894, 54047, 45176, 45796, 26106, 8000, 7918, 10118, 20071, 24624, 25620, 26176, 26067, 25776, 26561, 27902, 28741, 29353, 30337, 31094, 31569, 32325, 33027, 34871, 36949, 38125, 32663, 31341, 31569, 33475, 34541, 34314, 36145, 39400, 52941, 45455, 43067, 46678, 48694, 48867, 49961, 53690, 56298, 49859, 27824, 20369, 24498, 34941, 36675, 37157, 45369, 43216, 14204, 8082, 8000, 12580, 17773, 24314, 25902, 25757, 25502, 26843, 26451, 26588, 27235, 27318, 28612, 26871, 28439, 29471, 29863, 31706, 33447, 34961, 31651, 27757, 28624, 29298, 32243, 34031, 35863, 37020, 37922, 41643, 42675, 44408, 47435, 49094, 50243, 54475, 56043, 48400, 32776, 20306, 25867, 27682, 27792, 39145, 45788, 44475, 12024, 7325, 7973, 10929, 16396, 24169, 25200, 24890, 24243, 17659, 15651, 14984, 13114, 10012, 9647, 10514, 13341, 17000, 20996, 24600, 27173, 29635, 28404, 27867, 27839, 27173, 27729, 28149, 28996, 29624, 31620, 32204, 32906, 34275, 29961, 37667, 51565, 54282, 55486, 49102, 31800, 21145, 23651, 42392, 48502, 52706, 45706, 46016, 6761, 6514, 7216, 10337, 19251, 24980, 24753, 21616, 15988, 13863, 12949, 11525, 10859, 10612, 9745, 8596, 9682, 11553, 13725, 17831, 23059, 25941, 26051, 28851, 27765, 23369, 22529, 18106, 14282, 9749, 9173, 11553, 11133, 12020, 17737, 22298, 28827, 53361, 56298, 49412, 33094, 19631, 26533, 49733, 64835, 61761, 44922, 39102, 7188, 5984, 6651, 12463, 23510, 19471, 16051, 13478, 13204, 13988, 14635, 14635, 13796, 13020, 12710, 12235, 12455, 12792, 12675, 14118, 17082, 22400, 27071, 30655, 30016, 21973, 18341, 15796, 15412, 15667, 15812, 16094, 18447, 21412, 23737, 23035, 24357, 27376, 35357, 44149, 32702, 20753, 22667, 26906, 70525, 68929, 45231, 29608, 6714, 5565, 7380, 15773, 12153, 9663, 19796, 19898, 16259, 15529, 14910, 14773, 14380, 12847, 12318, 11561, 10220, 10192, 12427, 14188, 13204, 12694, 12557, 12129, 17875, 16918, 17847, 17682, 15922, 14945, 13851, 15922, 18584, 22808, 26310, 28298, 30714, 34188, 51945, 42278, 20271, 27510, 17851, 25055, 58059, 70780, 45878, 8659, 6204, 5792, 7718, 18361, 12024, 12525, 22278, 18467, 15357, 14600, 14153, 13596, 11753, 11059, 9835, 8267, 8184, 8604, 9318, 11953, 13239, 9565, 21341, 28647, 13224, 21157, 17855, 13569, 11690, 10467, 10694, 11698, 16541, 18804, 20592, 27961, 31745, 32365, 44859, 57718, 20663, 24490, 30208, 23176, 55624, 71118, 45486, 6761, 6239, 6184, 8000, 9231, 21373, 16878, 18631, 16196, 13761, 12529, 10376, 9882, 9498, 6925, 6988, 6286, 7071, 7710, 8514, 10329, 12345, 20922, 31816, 37635, 40314, 19616, 13933, 11325, 10067, 10639, 11431, 10173, 9106, 10894, 21894, 20145, 28827, 34180, 42816, 53933, 30494, 13957, 30855, 20659, 63996, 69604, 44392, 5557, 6157, 5792, 11420, 11714, 23965, 17682, 17682, 15220, 13231, 9902, 8396, 13365, 17094, 8894, 6604, 6122, 7518, 7345, 8851, 10075, 10914, 25302, 31690, 39306, 42851, 22427, 16031, 12192, 10314, 12792, 18718, 10400, 8894, 10545, 15380, 20180, 17627, 32557, 41831, 50933, 35447, 18345, 26141, 19537, 55843, 69012, 44447, 5055, 6157, 5792, 12596, 17169, 21157, 15804, 18075, 15804, 12557, 12565, 12929, 15875, 16467, 9141, 6506, 7792, 9800, 9125, 9655, 12847, 11098, 25596, 32667, 41522, 44365, 32616, 22188, 12612, 13059, 14271, 17561, 12663, 7937, 16173, 35345, 16933, 20518, 31463, 40682, 42196, 36796, 18008, 21435, 18424, 65820, 61286, 45706, 6788, 5710, 5373, 8620, 12965, 17737, 16980, 19278, 17035, 15886, 15749, 15804, 15412, 14125, 14298, 12929, 12647, 11635, 11690, 12055, 13341, 20055, 27549, 35412, 41522, 45286, 43698, 23129, 17302, 15541, 15459, 15412, 16643, 19149, 23263, 31937, 33286, 30741, 34855, 43400, 46984, 34024, 12773, 16090, 18451, 69102, 68373, 45341, 17067, 5482, 5600, 4871, 13082, 21906, 21259, 20839, 19745, 19718, 18906, 17867, 16973, 15933, 16773, 15741, 15204, 15741, 15067, 18769, 11792, 23176, 29090, 34992, 41549, 45149, 44929, 28165, 30016, 20294, 20376, 19910, 21871, 25518, 25937, 31537, 35039, 37792, 38859, 43537, 51161, 41922, 10173, 12980, 30024, 69439, 71902, 45843, 27675, 5482, 5373, 6384, 20698, 23976, 23976, 20839, 23384, 22153, 20667, 20667, 20859, 20969, 21051, 20522, 19682, 20075, 20212, 16408, 19227, 27337, 31024, 35584, 40318, 44757, 45796, 41855, 26678, 33847, 26086, 25475, 26706, 27773, 29541, 30918, 35376, 39051, 40757, 44431, 43765, 57608, 18353, 10663, 60529, 70980, 72157, 44192, 38035, 5612, 5592, 6322, 22176, 24761, 24788, 22855, 20357, 24251, 23996, 24243, 23231, 23231, 21945, 22729, 22365, 24635, 18698, 14220, 25220, 28541, 30576, 35675, 39816, 44529, 48486, 45914, 29114, 30345, 36008, 30098, 27153, 28804, 31467, 35898, 39490, 41961, 42718, 40310, 48353, 62369, 20051, 19063, 71063, 71373, 72157, 44612, 45788, 26290, 10384, 7820, 22114, 25627, 25765, 25737, 25984, 22510, 20878, 18918, 18024, 17349, 18271, 16957, 17349, 18808, 19373, 21608, 25549, 28149, 30522, 36231, 38557, 43153, 47557, 46471, 42212, 41188, 30016, 25675, 23906, 24271, 24016, 25165, 28647, 31337, 38514, 49075, 56416, 62890, 24039, 40525, 71557, 71765, 72267, 44584, 46682, 23035, 19890, 8871, 22506, 25655, 25729, 26094, 25976, 25165, 24373, 23898, 23424, 23086, 22612, 22812, 22192, 20486, 19000, 24627, 26498, 26973, 28898, 30376, 33012, 39769, 49043, 51039, 47737, 40404, 34804, 34831, 34549, 32224, 30455, 33682, 38196, 41616, 46859, 51902, 56416, 63565, 31153, 45471, 70792, 71565, 71957, 44110, 46180, 19361, 20557, 9949, 21996, 25682, 25145, 25082, 25667, 24180, 23698, 23388, 23388, 23251, 23533, 21965, 22639, 21235, 22047, 25831, 24847, 22804, 22522, 22459, 24365, 32353, 45776, 48384, 51722, 45612, 37604, 34494, 33820, 34294, 34996, 35808, 38863, 42200, 47024, 53078, 57565, 62780, 38494, 30863, 70820, 71537, 72157, 44812, 46882, 20812, 23831, 15122, 21733, 25400, 25090, 24580, 24608, 23624, 23478, 23478, 23506, 22612, 23478, 24125, 23533, 23141, 23114, 22220, 17596, 15341, 16125, 15051, 18663, 28020, 36875, 32114, 40933, 47071, 37349, 35416, 35161, 36145, 36847, 37824, 41945, 43459, 46486, 51647, 56918, 62161, 43255, 35067, 70839, 71173, 71847, 45004, 47212, 25627, 25282, 8200, 20667, 25345, 24671, 23522, 23796, 23541, 23624, 23596, 23651, 25584, 25357, 24318, 23953, 23953, 23898, 16984, 9796, 6118, 13533, 15122, 20247, 33098, 16573, 7353, 28329, 42839, 38863, 35471, 34996, 35808, 38498, 40486, 41773, 45365, 46012, 51173, 55376, 60839, 46549, 54467, 70329, 71063, 71765, 44329, 47631, 25620, 16647, 12396, 24698, 24925, 24114, 23941, 23741, 23824, 23541, 24243, 25027, 25639, 25212, 24592, 24984, 25576, 25631, 18890, 12012, 13588, 15914, 16553, 23302, 31255, 31392, 25082, 34714, 42220, 41380, 37376, 36082, 37851, 39365, 40878, 43259, 46486, 48647, 51682, 55769, 57475, 28157, 57549, 69125, 71200, 71765, 44412, 42588, 23314, 14796, 18051, 25455, 24843, 24059, 23439, 23659, 23741, 23933, 24690, 24965, 25722, 25384, 25686, 26161, 26945, 26725, 22812, 16863, 14263, 13788, 15247, 17765, 22827, 23075, 27271, 37267, 42475, 42502, 39894, 36537, 39255, 41325, 42337, 43851, 46714, 48792, 51847, 54200, 59463, 29196, 48220, 67776, 70835, 71373, 44439, 36059, 20843, 14314, 15698, 24333, 24141, 24004, 23357, 22737, 23741, 24216, 25082, 25694, 25722, 25749, 26051, 26635, 26945, 26196, 19875, 14847, 11945, 12008, 13376, 14298, 11973, 14937, 22663, 30161, 36965, 41890, 43004, 40094, 40741, 42502, 43624, 45055, 46714, 49604, 51200, 54200, 56463, 25714, 42831, 67157, 70753, 71008, 44047, 44212, 22886, 15847, 18800, 24051, 24478, 23502, 22937, 23859, 24333, 24525, 25082, 25165, 25749, 26671, 26918, 27729, 25384, 20376, 16353, 12447, 12118, 12902, 15275, 15749, 13176, 16788, 17847, 19243, 28565, 35004, 42337, 44188, 42839, 43286, 44800, 47024, 48847, 48992, 51847, 54537, 43714, 24894, 37525, 67941, 70533, 71373, 44165, 46620, 23424, 19631, 22604, 23039, 23976, 23976, 23275, 23859, 23914, 23769, 24690, 24800, 24965, 25631, 26333, 25110, 16573, 16353, 17447, 20310, 22518, 25510, 26376, 23741, 25620, 29906, 30690, 29659, 33188, 28173, 33608, 44780, 44663, 45055, 45784, 47333, 50114, 51345, 51765, 54592, 48812, 29180, 36412, 67357, 70361, 70980, 44165, 47184, 22337, 24455, 27510, 23741, 24286, 23694, 24031, 23831, 23776, 24525, 24608, 25082, 25475, 26843, 24663, 17667, 18314, 23667, 24086, 22118, 19620, 17012, 17843, 20835, 20169, 19384, 24455, 30090, 37859, 38149, 33725, 32659, 43886, 47608, 46996, 48537, 50816, 52102, 52549, 54957, 51192, 52718, 48604, 68122, 70251, 71145, 44392, 45424, 33224, 24600, 23286, 24808, 23584, 23584, 23384, 23859, 23941, 24133, 24690, 24690, 25447, 26149, 16800, 20110, 23776, 21224, 15925, 11220, 10518, 9925, 9780, 10392, 11094, 11204, 12298, 14341, 19557, 30765, 35259, 36580, 36078, 47725, 48510, 48902, 50478, 52184, 52886, 55012, 47388, 54212, 44471, 69141, 70251, 70725, 44082, 45341, 43737, 25365, 25000, 20522, 22627, 23557, 23384, 23639, 23776, 24443, 24133, 24918, 25620, 24133, 19463, 21031, 15851, 11337, 7388, 11165, 16765, 20898, 24282, 26078, 24729, 28816, 29180, 31871, 22412, 13957, 19737, 32659, 40000, 47980, 49749, 49157, 50898, 51902, 52914, 54929, 50443, 45839, 59251, 69149, 69412, 70141, 43718, 45788, 46882, 35831, 19553, 19580, 30925, 23949, 23804, 23776, 23859, 23741, 24133, 25200, 26039, 24106, 22098, 19745, 19408, 20576, 19792, 19337, 19129, 18702, 19596, 21639, 23627, 24796, 26565, 31388, 31204, 32498, 33965, 29659, 39380, 48180, 49075, 50835, 50953, 52184, 52522, 54984, 37784, 49357, 68149, 69431, 69494, 69859, 44027, 45149, 46718, 44757, 44075, 44329, 37545, 24286, 23494, 23859, 23859, 23941, 23741, 24808, 25200, 23741, 21314, 21314, 24251, 24780, 23541, 21071, 18518, 15463, 15353, 15071, 16612, 18620, 22259, 28706, 34541, 38753, 41031, 37784, 38769, 45827, 50533, 50953, 51427, 52102, 53106, 53608, 49839, 55263, 68220, 68847, 69267, 69494, 42906, 45149, 46043, 44784, 44922, 44867, 41922, 24678, 24251, 23439, 23859, 23741, 23741, 24525, 24525, 23349, 20165, 20922, 22290, 22290, 19627, 16910, 15733, 13663, 12549, 11208, 11455, 13745, 17776, 27973, 30435, 34612, 38961, 41988, 39553, 44259, 49075, 50561, 50843, 51820, 52741, 49839, 33639, 46871, 58224, 67443, 69239, 69294, 43635, 45514, 46043, 44475, 44612, 44502, 43965, 25161, 23439, 23439, 23467, 23859, 23267, 23859, 23522, 21506, 20392, 20165, 18988, 17702, 15322, 15267, 13561, 12784, 11973, 10941, 11498, 14400, 14482, 20192, 26129, 28957, 35212, 41314, 38878, 42690, 47506, 50141, 50561, 51373, 51792, 38102, 14741, 14439, 16043, 17584, 19400, 47671, 43463, 44502, 45961, 44392, 44420, 44475, 45231, 23118, 23082, 22573, 23075, 22400, 22765, 22992, 22098, 20922, 19408, 18459, 16890, 15522, 14043, 14655, 15749, 16925, 15584, 13961, 14635, 17875, 19863, 20867, 24843, 26722, 31008, 37227, 38294, 41039, 46922, 50533, 50169, 51008, 51737, 21831, 12478, 12933, 13133, 13553, 14110, 15569, 43745, 44502, 45988, 44337, 45012, 44137, 45451, 19706, 21878, 20976, 21953, 21816, 21788, 21059, 20082, 19325, 19188, 18039, 17090, 16224, 15776, 17929, 18878, 19435, 18878, 17620, 17957, 22071, 26329, 25345, 27506, 25855, 28098, 34145, 36808, 41349, 45553, 47816, 48600, 49804, 51345, 12565, 11337, 11200, 11282, 11675, 12404, 13216, 43580, 44055, 45541, 44282, 44702, 44557, 34780, 13969, 20427, 20337, 20867, 20165, 20757, 19800, 19016, 18878, 18431, 18094, 18067, 19298, 20447, 20667, 20612, 21588, 21141, 20275, 19710, 23322, 28812, 32067, 34145, 31820, 29075, 32686, 37227, 41376, 44349, 46839, 47961, 48910, 50616, 8541, 10498, 10443, 10443, 10890, 11282, 12322, 43580, 44337, 46016, 44255, 44110, 44475, 16639, 9306, 19204, 19416, 18851, 19718, 19608, 19298, 19016, 18878, 18714, 19580, 21231, 22882, 22180, 21980, 21733, 21451, 22902, 22957, 22820, 23969, 28675, 35004, 37392, 38769, 35212, 35714, 38769, 41969, 44824, 46000, 47514, 47514, 40902, 9059, 8984, 8984, 9376, 10306, 10835, 11702, 43945, 44310, 45286, 43580, 44055, 45459, 6706, 7580, 14459, 18020, 17627, 17847, 18459, 18659, 18596, 18851, 19973, 20894, 22627, 23859, 23212, 21306, 20329, 20886, 22455, 22902, 23322, 24608, 27635, 34137, 38961, 40839, 40729, 40082, 41204, 43647, 44431, 44149, 46447, 46365, 14306, 7973, 8208, 7918, 8592, 9349, 10024, 10890, 43580, 43580, 45149, 43608, 43690, 46024, 7380, 8090, 7071, 19122, 17071, 15859, 17090, 17263, 17894, 18067, 20365, 22800, 23859, 23914, 23129, 20247, 18486, 19773, 22290, 23157, 22957, 24024, 25620, 31310, 36718, 40922, 45043, 44231, 45078, 45161, 45051, 44067, 43702, 40290, 7063, 7498, 7843, 7698, 8063, 8592, 9322, 10863, 43945, 43361, 44392, 43808, 43890, 25996, 8255, 7725, 5337, 22259, 17325, 15529, 15192, 15949, 17200, 18576, 19918, 21933, 22992, 22263, 20192, 18514, 16753, 15996, 17475, 19827, 21843, 23047, 24314, 28373, 33471, 40529, 45043, 46867, 46647, 44184, 42278, 41075, 42278, 39314, 7353, 6859, 7224, 7788, 7671, 8118, 9157, 10443, 43635, 43271, 44000, 43498, 43416, 12525, 8063, 7643, 5255, 22341, 18357, 17016, 14745, 15027, 15302, 16788, 18184, 19918, 19718, 19043, 18094, 17008, 15220, 13988, 16506, 17510, 18039, 18796, 20337, 27424, 31882, 39918, 44012, 44933, 44157, 41522, 38976, 39788, 48525, 35200, 6996, 6439, 6439, 7396, 7788, 8290, 8592, 10078, 43298, 43188, 44000, 43525, 44255, 7965, 7671, 7278, 5647, 22086, 19533, 17463, 15110, 14133, 14545, 15137, 15949, 15612, 14545, 14208, 14298, 14243, 12592, 11835, 12592, 14098, 14271, 14298, 15949, 21886, 26255, 36533, 40910, 41804, 40627, 38867, 39004, 45671, 51416, 29910, 6549, 5965, 6357, 6329, 7004, 7616, 8090, 9431, 43188, 43188, 43298, 43416, 43671, 6933, 7753, 7251, 4580, 22561, 20820, 18020, 16176, 14945, 13878, 13376, 13486, 13486, 13431, 12482, 11498, 10494, 9098, 9216, 9773, 9937, 9882, 10812, 13412, 17133, 23235, 28808, 34525, 35447, 37408, 38220, 42843, 48161, 51580, 26243, 6749, 5965, 5965, 6329, 7004, 7196, 8063, 8929, 43188, 43216, 42796, 42349, 38125, 7498, 7333, 6659, 6204, 21659, 20392, 18467, 17710, 15529, 14188, 12729, 12929, 12255, 11416, 10192, 9380, 8741, 7737, 7345, 8047, 8102, 7710, 9224, 10592, 13275, 17498, 22314, 28333, 32227, 37271, 40208, 44212, 48918, 51773, 24365, 6157, 5965, 5765, 6357, 6302, 6694, 7616, 8510, 43161, 43216, 42769, 42376, 17624, 7835, 7306, 7306, 4325, 21796, 20612, 19133, 17792, 16259, 15027, 13714, 12537, 11416, 11533, 9463, 7875, 7318, 7016, 6094, 6961, 7435, 7408, 9424, 13282, 14086, 18455, 25706, 31361, 34325, 37490, 40600, 44039, 48745, 51180, 21729, 6157, 5490, 5765, 6357, 6329, 6949, 7251, 8118,\n        8,\n        0, 112568767309172, 6, 1, 175285199027252607942330356499331179285261039416457052358062226228862137957, 352748885689853111792340362419153546690909839254974950175281, 25, 100,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n\n    let success = true;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        index,\n        blobs_len,\n        blob,\n        success\n    );\n}\n","path":"/home/maximilien/vibe-check/noir-webauthn/src/main.nr"},"50":{"source":"use dep::std::println;\n\nglobal UPPERCASE_A_INDEX: u8 = 65;\nglobal UPPERCASE_Z_INDEX: u8 = 90;\nglobal LOWERCASE_A_INDEX: u8 = 97;\nglobal LOWERCASE_Z_INDEX: u8 = 122;\nglobal ZERO_INDEX: u8 = 48;\nglobal NINE_INDEX: u8 = 57;\nglobal ASCII_TABLE_START_INDEX: u8 = 0;\nglobal SORTED_ASCII_TABLE: [str<1>; 127] = [    \n    \"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\t\",\"\\n\",\"\\0\",\"\\0\",\"\\r\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\n    \" \",\"!\",\"\\\"\",\"#\",\"$\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\n    \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n    \":\",\";\",\"<\",\"=\",\">\",\"?\",\"@\",\n    \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n    \"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\n    \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n    \"{\",\"|\",\"}\",\"~\"\n];\n\n// Functions \nfn code_at<N>(s: str<N>, index: u64) -> u8 {\n    assert(index < N);\n    s.as_bytes()[index]\n}\n\nfn char_at<N>(s: str<N>, index: u64) -> str<1> {\n    let byte = code_at(s, index);\n    let ascii_index = byte - ASCII_TABLE_START_INDEX;\n    SORTED_ASCII_TABLE[ascii_index]\n}\n\nfn index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            index = i as i64;\n            match_count += 1;\n        } else if (index != -1) & (i - index < M) {\n            if (str_bytes[i] != substr_bytes[i - index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    // If the match count is not equal to the length of the substring,\n    // then the substring is not in the string\n    // Can happen when looking at a substring that is at the end of the string\n    // but the match is only partial\n    if match_count != M {\n        index = -1;\n    }\n\n    index\n}\n\nfn last_index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    let mut final_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            final_index = temp_index;\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        final_index = temp_index;\n    }\n\n    final_index\n}\n\n// We use Field instead of integers for the Vector here as integers \n// don't seem to work well with Vectors at the moment\nfn indexes_of<N, M>(s: str<N>, substr: str<M>) -> Vec<Field> {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut indexes: Vec<Field> = Vec::new();\n    for i in 0..N {\n        if (match_count == M) {\n            indexes.push(temp_index as Field);\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        indexes.push(temp_index as Field);\n    }\n\n    indexes\n}\n\nfn contains<N, M>(s: str<N>, substr: str<M>) -> bool {\n    index_of(s, substr) != -1\n}\n\nfn occurrences_of<N, M>(s: str<N>, substr: str<M>) -> u64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut occurrences = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            temp_index = -1;\n            match_count = 0;\n            occurrences += 1;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        occurrences += 1;\n    }\n\n    occurrences\n}\n\nfn digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    assert((byte >= ZERO_INDEX) & (byte <= NINE_INDEX), \"Character is not a digit\");\n    byte - ZERO_INDEX\n}\n\nfn hex_digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    if (byte >= ZERO_INDEX) & (byte <= NINE_INDEX) {\n        byte - ZERO_INDEX\n    } else if (byte >= UPPERCASE_A_INDEX) & (byte <= UPPERCASE_Z_INDEX) {\n        byte - UPPERCASE_A_INDEX + 10\n    } else if (byte >= LOWERCASE_A_INDEX) & (byte <= LOWERCASE_Z_INDEX) {\n        byte - LOWERCASE_A_INDEX + 10\n    } else {\n        assert(false, \"Character is not a hex digit\");\n        0\n    }\n}\n\nfn to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = digit_at(s, i);\n        result = result * 10 + digit as u64;\n    }\n    result\n}\n\nfn to_uint<N>(s: str<N>) -> u64 {\n    to_uint_slice(s, 0, N)\n}\n\nfn to_int<N>(s: str<N>) -> i64 {\n    if char_at(s, 0) == \"-\" {\n        -1 * to_uint_slice(s, 1, N) as i64\n    } else {\n        to_uint_slice(s, 0, N) as i64\n    }\n}\n\nfn from_hex_to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = hex_digit_at(s, i);\n        result = result * 16 + digit as u64;\n    }\n    result\n}\n\nfn from_hex_to_uint<N>(s: str<N>, with_prefix: bool) -> u64 {\n    if with_prefix {\n        from_hex_to_uint_slice(s, 2, N)\n    } else {\n        from_hex_to_uint_slice(s, 0, N)\n    }\n}\n\nfn to_array_of_chars<N>(s: str<N>) -> [str<1>; N] {\n    let mut result: [str<1>; N] = [\" \"; N];\n    for i in 0..N {\n        result[i] = char_at(s, i);\n    }\n    result\n}\n\n// Struct\n\nstruct String<N> {\n    value: str<N>,\n    len: u64,\n}\n\n// Implementation over String struct\n\nimpl<N> String<N> {\n    fn new(value: str<N>) -> Self {\n        Self { value, len: N }\n    }\n\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self.value, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self.value, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self.value, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self.value, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self.value, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self.value, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self.value, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self.value, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self.value, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self.value, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self.value, 0, self.len)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self.value)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self.value, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self.value, with_prefix)\n    }\n\n    fn to_array_of_chars(self: Self) -> [str<1>; N] {\n        to_array_of_chars(self.value)\n    }\n}\n\n// Trait\ntrait StringTrait {\n    fn code_at(self, index: u64) -> u8;\n    fn char_at(self, index: u64) -> str<1>;\n    fn index_of<M>(self, substr: str<M>) -> i64;\n    fn last_index_of<M>(self, c: str<M>) -> i64;\n    fn indexes_of<M>(self, c: str<M>) -> Vec<Field>;\n    fn contains<M>(self, substr: str<M>) -> bool;\n    fn occurrences_of<M>(self, c: str<M>) -> u64;\n    fn digit_at(self, index: u64) -> u8;\n    fn hex_digit_at(self, index: u64) -> u8;\n    fn to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn to_uint(self) -> u64;\n    fn to_int(self) -> i64;\n    fn from_hex_to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn from_hex_to_uint(self, with_prefix: bool) -> u64;\n}\n\n// Implementation for str type\nimpl<N> StringTrait for str<N> {\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self, 0, N)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self, with_prefix)\n    }\n}\n\n// Tests for String struct\n#[test]\nfn test_init() {\n    let s = String::new(\"hello\");\n    assert(s.len == 5);\n    assert(s.value == \"hello\");\n}\n\n#[test]\nfn test_char_at() {\n    let s = String::new(\"hello\");\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_code_at() {\n    let s = String::new(\"hello\");\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_index_of() {\n    let s = String::new(\"hello\");\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_last_index_of() {\n    let s = String::new(\"hello\");\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_indexes_of() {\n    let s = String::new(\"hello\");\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_contains() {\n    let s = String::new(\"hello\");\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_occurrences_of() {\n    let s = String::new(\"hello\");\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_digit_at() {\n    let s = String::new(\"20231219\");\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_hex_digit_at() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_to_uint() {\n    let s = String::new(\"20231219\");\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_to_int() {\n    let s = String::new(\"-25\");\n    assert(s.to_int() == -25);\n\n    let s = String::new(\"25\");\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_to_uint_slice() {\n    let s = String::new(\"2023/12/19\");\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_from_hex_to_uint_slice() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_from_hex_to_uint() {\n    let uppercase_hex = String::new(\"0x1324ABCDEF\");\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = String::new(\"0x1234abcdef\");\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = String::new(\"1234abcdef\");\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = String::new(\"0x000001\");\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n\n#[test]\nfn test_to_array_of_chars() {\n    let s = String::new(\"hello\");\n    let arr = s.to_array_of_chars();\n    assert(arr[0] == \"h\");\n    assert(arr[1] == \"e\");\n    assert(arr[2] == \"l\");\n    assert(arr[3] == \"l\");\n    assert(arr[4] == \"o\");\n}\n\n// Tests for String trait\n#[test]\nfn test_trait_char_at() {\n    let s = \"hello\";\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_trait_code_at() {\n    let s = \"hello\";\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_trait_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_trait_last_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_trait_indexes_of() {\n    let s = \"hello\";\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_trait_contains() {\n    let s = \"hello\";\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_trait_occurrences_of() {\n    let s = \"hello\";\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_trait_digit_at() {\n    let s = \"20231219\";\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_trait_hex_digit_at() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_trait_to_uint() {\n    let s = \"20231219\";\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_trait_to_int() {\n    let s = \"-25\";\n    assert(s.to_int() == -25);\n\n    let s = \"25\";\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_trait_to_uint_slice() {\n    let s = \"2023/12/19\";\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint_slice() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint() {\n    let uppercase_hex = \"0x1324ABCDEF\";\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = \"0x1234abcdef\";\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = \"1234abcdef\";\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = \"0x000001\";\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n","path":"/home/maximilien/nargo/github.com/madztheo/noir-string-utils.gitmain/src/lib.nr"}},"names":["main"]}