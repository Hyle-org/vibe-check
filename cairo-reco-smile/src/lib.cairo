use core::array::ArrayTrait;
use core::pedersen::PedersenTrait;
use core::hash::{HashStateTrait, HashStateExTrait};
use core::serde::Serde;

mod xgb_inference;

fn main(input: Array<felt252>) -> Array<felt252> {

    let mut input = input.span();

    let (identity, image): (ByteArray, Array<felt252>) = Serde::deserialize(ref input).unwrap();
    let mut conv: Array<i32> = ArrayTrait::new();
    let mut n = 0;
    
    let payload = image.clone();

    while n < image.len() {
        let val:i32 =(*image[n]).try_into().unwrap();
        conv.append(val);
        n = n +1;
    };

    let initial_state: felt252 = 666;

    let input_vector = conv.span();

    let tree_0 = xgb_inference::Tree {
    base_weights: array![-5494, -51613, 16234, -28168, -76461, 48646, -18028, -67649, 3597, -82397, 14863, 17819, 100938, -64784, -461, -16277, -83087, -19938, 49201, -83482, 51434, 107460, -75122, 42080, -36991, 23219, 135535, 14924, -76668, 63131, -17221, -44454, 97666, -90051, 32815, 23707, -49940, -39272, 77367, -101633, -66538, -4566, 218368, -105484, 49279, 18075, 97770, 45490, -51427, -88335, 37837, 181319, 84944, -38876, 129840, -94673, -50274, -26386, 126067, 950, -56611, -26309, 8220, -905, 51841, -28038, 10594, -30456, 29781, -8393, 23910, -19714, 9227, -26190, 9351, 34822, -10568, -31183, 32320, 17495, -21518, -29264, 33542, 76195, -22021, -2658, -38367, -22257, 54799, 2703, 53432, 42288, 7932, 39733, -461, -19426, 8387, -31133, 29054, 21219, -7073, 41816, 73737, 1565, 37038, 21014, -21988, -4267, 61755, 15498, -29661, -22879, -1825, 33860, -12956, 53038, 2155, -3730, 31694, -24841, -1644].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 0, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 0, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1944, 1550, 1617, 2038, 1847, 2140, 1847, 1569, 1305, 1800, 1698, 1502, 1236, 1666, 1712, 2202, 107, 1551, 1998, 1944, 0, 2277, 845, 1848, 1405, 2038, 1648, 1906, 749, 2281, 1551, 2042, 641, 1799, 1815, 1887, 1802, 1895, 1619, 493, 1645, 660, 2133, 1742, 919, 1750, 1563, 250, 1848, 1945, 1504, 1801, 1951, 1474, 740, 1665, 2089, 1523, 1695, 217, 2045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![39216, 49412, 62353, 26667, 76078, 56863, 49020, 22745, 50196, 96863, 68235, 63922, 60000, 59608, 61961, 52549, 80784, 32157, 27843, 26275, 51434, 57647, 77647, 54118, 63529, 40000, 57255, 63137, 61569, 60784, 78824, 18039, 21961, 70196, 26275, 27059, 52549, 33725, 56078, 96471, 33725, 50980, 74902, 59608, 80000, 67451, 55686, 38824, 72157, 79216, 68235, 61961, 56078, 59216, 52941, 58824, 69020, 52549, 74510, 86667, 78039, -26309, 8220, -905, 51841, -28038, 10594, -30456, 29781, -8393, 23910, -19714, 9227, -26190, 9351, 34822, -10568, -31183, 32320, 17495, -21518, -29264, 33542, 76195, -22021, -2658, -38367, -22257, 54799, 2703, 53432, 42288, 7932, 39733, -461, -19426, 8387, -31133, 29054, 21219, -7073, 41816, 73737, 1565, 37038, 21014, -21988, -4267, 61755, 15498, -29661, -22879, -1825, 33860, -12956, 53038, 2155, -3730, 31694, -24841, -1644].span()
    };
    
    let tree_1 = xgb_inference::Tree {
    base_weights: array![-5096, -50235, 8845, -29337, -68547, 32633, -18120, -61838, -5386, -98357, -57557, 7725, 71564, 39697, -29419, -65293, 147140, 53462, -26288, -21247, -106976, -40905, -89337, -4661, 86979, 38855, 101213, 5554, 94152, -67391, -10217, -12717, -77681, 60244, 4278, -26934, 83696, -80162, -2589, -77043, 153287, -112630, 4802, -48458, 78346, 4679, -99434, 23584, -30430, 125464, -28378, 74115, -2514, 46448, 140582, -20102, 73655, 57659, 157923, 29234, -73849, -32127, 23987, -15303, 30387, -25163, 19521, -17144, 46096, 35249, -7417, -1276, -30470, -21470, 4276, 33487, -31038, 70288, -10548, -12668, -35572, 45018, -23918, -15494, 42067, -12817, 44773, 47572, -10914, 14416, -31434, -4971, 19953, -10645, 31208, 19902, 51415, 29776, -18344, 37560, 5891, 7863, -18891, 25135, -4650, 47810, 5418, 21787, -10792, 35496, -19852, 26044, -15477, -2935, 56966, -12752, 39151, -30101, -14860, 4558, -14966, 21549, -5778].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 0, 0, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 0, 0, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1994, 1504, 1664, 1986, 835, 1900, 1522, 1124, 1695, 1262, 1902, 1850, 2185, 2000, 2088, 1473, 47, 2083, 742, 2178, 1088, 1898, 1792, 1598, 1598, 1509, 1284, 1943, 1142, 1378, 1845, 2300, 1798, 0, 0, 43, 836, 1549, 884, 937, 1013, 1709, 1692, 2048, 2142, 1429, 1454, 2083, 1754, 2279, 1208, 1619, 1414, 1647, 1597, 1568, 1567, 1671, 2092, 947, 846, 1616, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![34510, 45882, 60784, 23529, 34118, 53333, 61569, 90588, 26275, 41961, 46275, 58431, 60000, 63922, 58824, 21176, 37647, 25490, 32549, 46275, 80392, 63529, 29804, 49412, 68627, 56078, 68235, 67843, 77647, 59608, 68627, 47059, 65882, 60244, 4278, 85098, 48235, 28235, 26275, 23922, 62745, 13725, 38824, 85098, 34902, 49412, 42745, 41961, 74510, 53725, 56863, 50196, 72549, 65882, 78824, 47451, 74118, 73333, 55294, 63529, 50980, 69412, 74510, -15303, 30387, -25163, 19521, -17144, 46096, 35249, -7417, -1276, -30470, -21470, 4276, 33487, -31038, 70288, -10548, -12668, -35572, 45018, -23918, -15494, 42067, -12817, 44773, 47572, -10914, 14416, -31434, -4971, 19953, -10645, 31208, 19902, 51415, 29776, -18344, 37560, 5891, 7863, -18891, 25135, -4650, 47810, 5418, 21787, -10792, 35496, -19852, 26044, -15477, -2935, 56966, -12752, 39151, -30101, -14860, 4558, -14966, 21549, -5778].span()
    };
    
    let tree_2 = xgb_inference::Tree {
    base_weights: array![-4409, -38987, 6970, -16296, -57146, 23107, -22832, -46101, 27248, 75640, -61391, -2293, 51397, 28106, -34908, -75159, -26783, -9474, 73052, -22197, 149818, -16071, -69118, 46187, -23724, 22214, 80252, -48774, 48140, -59511, -4532, 16459, -83416, 3384, -62799, 40471, -53642, -16953, 113505, -32740, 58633, 199547, -39619, -46830, 59978, -71741, 88700, -8476, 81482, -45944, -1094, 54503, -1600, 18585, 101947, 70358, -76222, -6018, 80629, -73833, -21441, -50609, 15408, 52445, -16719, -25932, 32259, -2388, 59892, 33594, -20655, 19910, -18701, -18985, 40970, 28313, -14640, 42784, -3285, 48873, -14250, 12334, 78638, -23598, 7138, -21591, 7048, 39088, -8968, -30239, -18048, 57717, -7696, -12969, 13471, 33242, 5973, 9594, -15603, 13736, -8178, -22409, 19534, -18088, 4545, 22628, -5876, 12694, 35528, -13212, 40931, -28440, 19779, 32601, -8123, -20153, 28677, -9272, -26543, 2973, -19860, 3040, -20456, 16331, -6158].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 0, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1991, 1712, 1647, 1997, 1761, 2082, 1502, 2042, 2144, 2039, 1425, 1570, 497, 973, 787, 1597, 1616, 1666, 2182, 42, 1887, 1850, 1800, 1851, 1898, 1663, 2181, 1038, 1842, 795, 2042, 660, 1237, 475, 1940, 1597, 147, 1764, 890, 0, 2005, 829, 839, 1376, 915, 892, 1762, 1191, 1409, 1473, 1521, 1213, 976, 1554, 1308, 1739, 1213, 1646, 1850, 1601, 1247, 1261, 1598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![36471, 38039, 66667, 29020, 24706, 53333, 67843, 18039, 37255, 27059, 43137, 44314, 66667, 42745, 67843, 8627, 27843, 31373, 31373, 27843, 65098, 45882, 90196, 36863, 52157, 52157, 58431, 36078, 59216, 72549, 61569, 10980, 86275, 89020, 3529, 55294, 93333, 29804, 64314, -32740, 27059, 32941, 67059, 41569, 41176, 34510, 67451, 45098, 55294, 43922, 59608, 34510, 42353, 57647, 66667, 57647, 84706, 57255, 34118, 69412, 65882, 74118, 80000, 52445, -16719, -25932, 32259, -2388, 59892, 33594, -20655, 19910, -18701, -18985, 40970, 28313, -14640, 42784, -3285, 48873, -14250, 12334, 78638, -23598, 7138, -21591, 7048, 39088, -8968, -30239, -18048, 57717, -7696, -12969, 13471, 33242, 5973, 9594, -15603, 13736, -8178, -22409, 19534, -18088, 4545, 22628, -5876, 12694, 35528, -13212, 40931, -28440, 19779, 32601, -8123, -20153, 28677, -9272, -26543, 2973, -19860, 3040, -20456, 16331, -6158].span()
    };
    
    let tree_3 = xgb_inference::Tree {
    base_weights: array![-3842, -30069, 7134, -7568, -47924, 19035, -24854, -33476, 42442, -63921, -25686, 8851, 56300, -45076, 4689, 742, -54387, -9109, 79084, -5168, -74484, 18308, -42641, 20992, -20716, 24645, 90956, 17201, -59578, 51496, -26773, -35842, 61226, -73448, -12718, 61508, -43331, 295, 105456, -54071, 71890, -101744, -57635, -49015, 60826, -47472, 123012, 48995, 7242, -45035, 9990, 71191, -6003, 112424, 30125, 48582, -35535, -68900, 238, -11412, 102904, -57247, 21500, -2403, -26548, 8745, 49599, -22980, 28467, -20224, 8963, -6549, 40992, -21120, 11603, 24753, -17481, 36928, -16367, -28223, 2536, -10661, 40833, 717, -32057, 7318, -19814, 40496, -19432, -9094, 31299, 17357, -16663, -12916, 53049, 8015, 24798, -4087, 13826, -16499, 15481, 15828, -9758, 5097, 34052, 10622, -16182, 35746, -22794, -3273, 36847, 2980, 39340, -23954, 10332, -21566, 28096, -9170, 30170, -12668, 27726, 41459, -2678, 23700, -20762, -11401, 20136].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1850, 1696, 1618, 1936, 797, 1284, 2181, 1617, 2230, 1501, 1598, 1502, 2093, 1473, 1711, 1997, 332, 1504, 499, 1305, 834, 1269, 1801, 1472, 2037, 1523, 38, 1598, 1938, 512, 844, 1466, 1236, 1744, 4, 1871, 1751, 807, 881, 1830, 1309, 1403, 1250, 2266, 2126, 1745, 1239, 1233, 1309, 1854, 1649, 2284, 1007, 1551, 79, 1802, 754, 1893, 977, 1326, 1695, 1709, 2038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![38039, 40000, 71765, 37255, 46667, 74510, 71765, 27843, 40784, 41961, 54118, 67059, 67843, 70588, 75294, 25490, 52549, 35294, 46275, 54510, 31373, 53333, 78431, 47059, 65490, 63922, 69804, 65882, 76863, 75686, 77255, 29804, 54118, 47451, 36471, 33333, 41569, 35686, 74902, 38824, 51373, 37647, 9412, 4706, 36863, 33333, 73333, 53333, 65490, 70588, 72157, 50588, 56078, 88235, 87451, 70196, 66275, 89020, 83529, 82745, 80784, 64314, 76863, -2403, -26548, 8745, 49599, -22980, 28467, -20224, 8963, -6549, 40992, -21120, 11603, 24753, -17481, 36928, -16367, -28223, 2536, -10661, 40833, 717, -32057, 7318, -19814, 40496, -19432, -9094, 31299, 17357, -16663, -12916, 53049, 8015, 24798, -4087, 13826, -16499, 15481, 15828, -9758, 5097, 34052, 10622, -16182, 35746, -22794, -3273, 36847, 2980, 39340, -23954, 10332, -21566, 28096, -9170, 30170, -12668, 27726, 41459, -2678, 23700, -20762, -11401, 20136].span()
    };
    
    let tree_4 = xgb_inference::Tree {
    base_weights: array![-3346, -47489, 1573, -7784, -56656, 23489, -8635, -47547, 37545, -59798, 70165, -9724, 43651, -34663, 4327, 41225, -68273, 78556, -54709, -62479, 51325, 136593, -26995, -2033, -82989, -5796, 59859, 19645, -41234, 35606, -6903, -69526, 151103, -89342, 20684, 9208, 157411, -89963, 48219, -49514, -84532, 136825, -31294, -20250, 185945, -45967, 13748, -101653, 52700, 50831, -22597, 93754, 35058, -9618, 78247, -49076, 7615, 7583, 64418, -47499, 4790, -28798, 6287, 69328, -19813, -31021, 16811, 39770, -26021, 26779, -22369, -25452, 60579, -35727, 3069, -17295, 13877, -26620, 21501, -20615, 57746, 13279, 62983, -3489, -24390, 19134, -433, -40017, -11053, -23745, 35550, 28012, -6617, -27056, -2584, 10174, 35290, -9485, 14687, 15554, -13165, 42716, -19982, -22841, -12092, 15494, -12947, 11951, -5958, -9635, 23107, 5553, -16769, -4604, 7311].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 0, 75, 77, 79, 0, 0, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 0, 76, 78, 80, 0, 0, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2041, 1570, 1665, 1949, 1946, 1287, 2043, 1360, 703, 568, 1569, 2180, 2233, 1332, 1569, 1212, 1756, 237, 1160, 1597, 1948, 2238, 0, 1892, 1032, 1503, 669, 2006, 1894, 549, 796, 2299, 1802, 864, 997, 2037, 1796, 23, 0, 1500, 1851, 1996, 0, 0, 1136, 1991, 1649, 298, 1852, 2205, 736, 1953, 557, 1822, 533, 795, 1551, 1518, 1752, 1377, 1798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![23529, 20392, 45882, 13725, 80392, 39608, 53333, 19216, 34510, 94902, 80392, 74118, 35686, 44706, 60784, 20784, 28235, 24314, 78431, 55294, 36863, 33333, -26995, 29804, 85490, 29412, 31765, 49020, 69020, 67843, 48235, 45490, 17647, 89804, 23137, 22353, 15294, 68235, 48219, 60784, 89412, 13333, -31294, -20250, 68627, 32157, 33333, 70196, 25882, 43922, 21569, 38431, 38039, 19608, 60392, 40000, 70588, 54902, 32941, 60392, 63922, -28798, 6287, 69328, -19813, -31021, 16811, 39770, -26021, 26779, -22369, -25452, 60579, -35727, 3069, -17295, 13877, -26620, 21501, -20615, 57746, 13279, 62983, -3489, -24390, 19134, -433, -40017, -11053, -23745, 35550, 28012, -6617, -27056, -2584, 10174, 35290, -9485, 14687, 15554, -13165, 42716, -19982, -22841, -12092, 15494, -12947, 11951, -5958, -9635, 23107, 5553, -16769, -4604, 7311].span()
    };
    
    let tree_5 = xgb_inference::Tree {
    base_weights: array![-2821, 3151, -28874, -12633, 22790, -45767, 1100, 2237, -28947, 11013, 56984, 12189, -60687, 23470, -43013, -21237, 21188, -49337, -9313, 35104, -12443, 9576, 91407, 27788, -106153, 25232, -65628, -14640, 50001, -59219, 29593, -1663, -42083, -15506, 35722, -21343, -69022, 19902, -27215, -45938, 44704, -50980, 4212, -20521, 78230, 36529, 113446, -9877, 80004, -129291, 19067, -43636, 109837, -78227, -32779, 71074, -41828, 83089, -1845, 52456, -71952, 94947, -106764, -5529, 16326, -13683, 30661, 10043, -10391, 22085, 1909, -18598, 2000, -22857, 4142, -26442, 8851, 10711, -11061, -6747, -34703, 2221, 19576, 6952, -20089, 18467, -2611, 7003, -20431, -6163, 32334, 30943, -3023, 37386, -1630, 18493, -18101, 33524, -8401, -9362, -40767, 33917, -24965, -12509, 60402, -18004, -29338, 2743, -19603, -18012, 35834, 8116, -20808, 38810, 9248, 41160, -7235, 47566, -30774, 37, -27407, -16245, 50009, -3696, -36785].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 0, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1646, 2033, 786, 1649, 1307, 1549, 1252, 1938, 883, 1647, 2182, 1450, 1692, 1995, 220, 1522, 1259, 1646, 869, 1935, 836, 400, 1934, 356, 1891, 977, 2141, 1452, 2206, 242, 1031, 1855, 1037, 1522, 1646, 2032, 1892, 1894, 1393, 1787, 2230, 1454, 1743, 1644, 591, 877, 1392, 1803, 291, 574, 0, 19, 2088, 1321, 1618, 1795, 1117, 1517, 2174, 694, 1884, 1107, 2041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![73725, 52549, 71373, 44314, 76863, 72941, 81176, 30588, 47059, 57255, 66667, 84706, 58039, 64706, 89412, 42745, 41176, 47451, 38824, 41569, 48235, 80784, 66667, 76863, 90588, 65490, 75294, 74902, 66667, 23137, 92941, 37647, 90980, 33725, 37647, 34118, 68627, 22745, 20392, 52941, 51765, 54902, 54118, 67059, 67843, 41176, 99608, 52549, 75686, 11373, 19067, 22745, 65882, 75686, 79216, 59608, 74902, 77647, 40392, 81569, 71765, 85098, 46667, -5529, 16326, -13683, 30661, 10043, -10391, 22085, 1909, -18598, 2000, -22857, 4142, -26442, 8851, 10711, -11061, -6747, -34703, 2221, 19576, 6952, -20089, 18467, -2611, 7003, -20431, -6163, 32334, 30943, -3023, 37386, -1630, 18493, -18101, 33524, -8401, -9362, -40767, 33917, -24965, -12509, 60402, -18004, -29338, 2743, -19603, -18012, 35834, 8116, -20808, 38810, 9248, 41160, -7235, 47566, -30774, 37, -27407, -16245, 50009, -3696, -36785].span()
    };
    
    let tree_6 = xgb_inference::Tree {
    base_weights: array![-2511, 3800, -22375, -17368, 12250, -30201, 15635, 4135, -30785, 17711, -28083, -14295, -45439, -21662, 45530, -31055, 46968, -66600, -15490, 13956, 89022, -43151, 49600, -24357, 31178, -48429, 48607, 11127, -78540, 58807, -72523, -36343, 90701, -72071, 58383, -83894, -21001, -6943, -67910, -3024, 24372, -42203, 105419, -65510, -9657, -30460, 114823, -30248, 108215, -26643, 62791, -50194, 108205, -35060, 105114, 66175, -32935, -106960, 10260, -53932, 70152, 17861, -110382, -2297, -17775, -24278, 45865, -28394, 24576, 6099, 27914, -4257, -27286, -15136, 23373, -4309, 18758, -23656, 17617, 7124, -7788, 15692, 4162, 24601, -34136, -29932, 34389, -7093, -27897, 31286, -10741, 34082, -16218, -16895, 43741, 4184, -12829, 44697, -17304, 9075, -23078, -15249, 25736, -8231, -18289, -9397, 56250, 41731, -24102, -23459, 29870, -31622, 12093, 15899, -36247, -20852, 34713, 21397, -29536, 37225, 11214, -8667, -35412].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 0, 107, 109, 111, 113, 115, 117, 119, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 0, 108, 110, 112, 114, 116, 118, 120, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1010, 1848, 68, 1646, 1618, 1405, 583, 1888, 784, 1848, 656, 1066, 1848, 956, 691, 1344, 2042, 896, 1648, 2182, 648, 944, 932, 1749, 655, 1798, 419, 1691, 470, 1932, 28, 1664, 1865, 530, 1258, 2005, 1290, 595, 945, 1504, 1712, 560, 2278, 1759, 1672, 695, 1992, 296, 2246, 1209, 1068, 1644, 746, 0, 218, 605, 986, 1163, 587, 1791, 1502, 0, 1589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![69804, 37647, 85098, 34902, 79216, 67451, 76471, 26667, 27843, 84706, 86275, 75294, 89020, 77255, 91373, 82353, 17647, 40392, 72549, 49412, 47451, 70980, 69412, 81569, 46275, 93725, 53725, 69804, 84314, 34510, 73725, 27843, 22745, 65882, 43137, 6667, 70980, 79216, 80392, 48627, 45490, 34118, 18824, 75294, 42353, 54902, 51765, 27451, 80392, 79608, 63922, 66275, 68627, -35060, 89412, 52549, 77255, 52941, 70196, 23137, 74510, 17861, 44314, -2297, -17775, -24278, 45865, -28394, 24576, 6099, 27914, -4257, -27286, -15136, 23373, -4309, 18758, -23656, 17617, 7124, -7788, 15692, 4162, 24601, -34136, -29932, 34389, -7093, -27897, 31286, -10741, 34082, -16218, -16895, 43741, 4184, -12829, 44697, -17304, 9075, -23078, -15249, 25736, -8231, -18289, -9397, 56250, 41731, -24102, -23459, 29870, -31622, 12093, 15899, -36247, -20852, 34713, 21397, -29536, 37225, 11214, -8667, -35412].span()
    };
    
    let tree_7 = xgb_inference::Tree {
    base_weights: array![-2147, -40665, 327, -32138, -88772, 7232, -13482, -63008, -14871, -103842, 40523, -12639, 14687, -24309, 3555, -71991, 87001, 10465, -41647, -7576, -114590, 44910, -24315, 11234, -33475, 22805, -13890, -5365, -36732, 25427, -29968, -81793, 30562, 59051, -22791, -50705, 42316, 87855, -53424, -24624, 34035, -3789, -35380, -11829, 43481, -51175, -3321, 15461, 57078, -31462, 19060, -29683, 20362, -62128, -21492, 6704, 73657, -47398, 31704, -27238, 5130, 37454, -26728, 21913, -23911, 3821, 37822, 51047, -23434, -18178, 23511, 11108, -9606, 25393, 2065, -678, -18682, -17376, 4984, 6278, -9032, 6406, 27333, 18385, -12310, 23607, -3374, 2131, -14410, 23819, -1522, -20941, 10683, -17860, -2304, 7842, -8208, 524, 30703, 16168, -17000, -15248, 20370].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 0, 0, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 0, 0, 63, 65, 67, 69, 0, 0, 0, 0, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 0, 0, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 0, 0, 64, 66, 68, 70, 0, 0, 0, 0, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2040, 1856, 821, 639, 1899, 691, 2129, 487, 1939, 2100, 1802, 1455, 1619, 1595, 1644, 1053, 1172, 2078, 344, 2290, 2096, 0, 0, 497, 699, 1191, 2278, 2124, 786, 1836, 1035, 1759, 846, 0, 0, 4, 1152, 1217, 1950, 0, 0, 0, 0, 1616, 1666, 402, 2130, 1517, 544, 1429, 1712, 976, 1090, 567, 587, 1695, 418, 1547, 2041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![18431, 66275, 59216, 27843, 82745, 38824, 68235, 78431, 27843, 12941, 65490, 42353, 71765, 56863, 78431, 81569, 51373, 16471, 9020, 12549, 8235, 44910, -24315, 38039, 54902, 72941, 72941, 46275, 50980, 76471, 85490, 62353, 25882, 59051, -22791, 6667, 73725, 65098, 67843, -24624, 34035, -3789, -35380, 26667, 37255, 25490, 41176, 73333, 65098, 61569, 72549, 39216, 45098, 84706, 54902, 70196, 49804, 74902, 73333, -27238, 5130, 37454, -26728, 21913, -23911, 3821, 37822, 51047, -23434, -18178, 23511, 11108, -9606, 25393, 2065, -678, -18682, -17376, 4984, 6278, -9032, 6406, 27333, 18385, -12310, 23607, -3374, 2131, -14410, 23819, -1522, -20941, 10683, -17860, -2304, 7842, -8208, 524, 30703, 16168, -17000, -15248, 20370].span()
    };
    
    let tree_8 = xgb_inference::Tree {
    base_weights: array![-1830, -11425, 6939, -1922, -32948, 18596, -8296, -11899, 19885, -54476, -13942, 26091, -12938, -13493, 28692, -5979, -47953, 43234, -15498, 13857, -63957, 2888, -45182, 1344, 38933, -39685, 18866, -9025, -60318, -8863, 62007, -17309, 22929, -67446, -363, 18982, 92748, -32692, 31539, -55653, 85324, -30366, -80338, -20460, 45331, 101538, -54048, 33268, -25603, -37811, 46448, -8091, -74934, 63968, -25051, -83347, -6184, -5981, -84648, 21158, -84622, 136067, 36020, 1171, -9155, 22389, 912, 5778, -24777, 21599, -20184, 10355, -14441, 33459, -12475, -21168, -1397, 36685, 23, -28070, 22478, 42870, -28659, -17126, 13673, -26786, -2334, 11143, -11669, -17511, 20288, -14584, 63677, 32665, -19025, -23291, 13764, -17729, 780, -16450, 24226, 20331, 7721, -9819, 26643, -28096, 14029, -8953, 30784, -26362, 4505, 17995, -39054, -4736, 4211, -22121, 27809, 29935, -27899, -23806, 14439, 20011, -30852, -7021, 51688, -1629, 32584].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1800, 1645, 1246, 1258, 787, 1553, 519, 1565, 1695, 1548, 1745, 1889, 1983, 1391, 58, 1900, 1855, 2275, 1988, 926, 1602, 2178, 1066, 1617, 1987, 1615, 1597, 453, 1714, 533, 1454, 1696, 1522, 1379, 1476, 1506, 2038, 977, 1949, 1654, 999, 1121, 829, 2154, 543, 1463, 1603, 2046, 2140, 716, 1539, 1767, 2097, 748, 930, 1058, 45, 1953, 187, 1888, 690, 1597, 930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![50196, 58431, 54118, 58824, 54902, 78039, 85882, 64706, 49020, 55686, 67451, 47843, 76863, 99608, 61176, 45490, 67451, 53725, 59216, 49412, 56471, 66275, 34902, 52941, 43529, 72549, 81961, 21176, 58431, 55294, 60000, 28235, 40784, 48235, 72157, 61176, 72157, 49020, 37647, 55686, 61176, 68627, 71373, 23137, 45098, 61961, 40784, 19216, 57255, 56863, 38039, 67059, 82353, 57647, 70196, 17255, 75686, 56471, 7059, 36863, 33333, 42353, 78431, 1171, -9155, 22389, 912, 5778, -24777, 21599, -20184, 10355, -14441, 33459, -12475, -21168, -1397, 36685, 23, -28070, 22478, 42870, -28659, -17126, 13673, -26786, -2334, 11143, -11669, -17511, 20288, -14584, 63677, 32665, -19025, -23291, 13764, -17729, 780, -16450, 24226, 20331, 7721, -9819, 26643, -28096, 14029, -8953, 30784, -26362, 4505, 17995, -39054, -4736, 4211, -22121, 27809, 29935, -27899, -23806, 14439, 20011, -30852, -7021, 51688, -1629, 32584].span()
    };
    
    let tree_9 = xgb_inference::Tree {
    base_weights: array![-1671, -21412, 1934, 4744, -36183, 11822, -6762, -5482, 92034, -23201, -70612, 3039, 45766, -23471, 6344, -56400, 8349, -27303, 110465, -30906, 56489, -77275, 31909, 11961, -20139, 64209, -4055, 24501, -29707, 39190, -7981, 5224, -93233, 27304, -33489, 156235, 28100, -40549, 20524, -36626, 102805, 28456, -80674, -19599, 96765, -3930, 32225, -10534, -61351, -17787, 76370, -50852, 44726, 47277, -55799, -32815, 76180, -14879, 52553, -30713, 10110, 17840, -29377, 24547, -31267, -18484, 13929, -18167, 7800, -10772, 54116, -17012, 34425, 6633, -15633, -20847, 17407, -34555, 16437, 41925, -18688, 1686, -25662, 46944, -17747, -223, -38070, 11705, -9285, -22848, -780, 8114, -23526, 26280, -16363, 24460, -23636, -20973, 14759, 20800, -21216, -78, 29019, -26389, 21689, -1765, -12653, 38361, -22129, 24847, -11550, 2099, 22253, 25322, -11437, 9980, -5870].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 0, 81, 0, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 0, 82, 0, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1898, 1806, 1619, 1756, 1646, 1333, 1997, 1588, 1311, 1802, 566, 1611, 801, 1475, 1663, 1445, 1347, 0, 248, 1124, 48, 1216, 836, 2046, 2025, 1229, 606, 1579, 1893, 2043, 795, 2173, 411, 324, 1303, 279, 2046, 1663, 518, 2171, 744, 0, 1715, 0, 1655, 2093, 2046, 1631, 2285, 483, 1983, 803, 1054, 990, 1829, 863, 1795, 2101, 1809, 1614, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![28235, 22353, 56078, 46667, 61569, 64706, 61961, 13725, 27843, 65490, 87843, 56471, 64314, 55686, 63922, 5098, 58431, -27303, 50980, 69804, 31765, 25098, 65098, 43137, 71765, 50588, 70588, 72549, 88235, 61569, 67843, 20000, 3529, 14902, 78824, 5490, 35686, 23922, 32157, 32549, 80000, 28456, 21961, -19599, 80392, 52157, 68627, 6275, 24314, 16863, 85882, 85098, 85882, 56078, 86275, 24314, 83529, 27059, 61569, 54510, 78824, 17840, -29377, 24547, -31267, -18484, 13929, -18167, 7800, -10772, 54116, -17012, 34425, 6633, -15633, -20847, 17407, -34555, 16437, 41925, -18688, 1686, -25662, 46944, -17747, -223, -38070, 11705, -9285, -22848, -780, 8114, -23526, 26280, -16363, 24460, -23636, -20973, 14759, 20800, -21216, -78, 29019, -26389, 21689, -1765, -12653, 38361, -22129, 24847, -11550, 2099, 22253, 25322, -11437, 9980, -5870].span()
    };
    
    let tree_10 = xgb_inference::Tree {
    base_weights: array![-1501, -49352, -59, 31855, -59696, 3642, -17249, 74057, -62657, -67530, 42415, -3732, 14275, -26118, 17537, -22613, 114015, 11624, -30388, -80135, -4031, -46368, 117273, -6671, 44072, 27241, -93, -19542, -75729, -22698, 47056, 8966, 187060, 37380, -88223, 73522, -62643, -25421, 10888, 45423, 331, 5357, -19462, 83913, -31081, 12781, 60410, -14944, 21285, 70704, -22826, 66773, -86496, -82559, 3903, -83562, 59557, 30935, -23321, 65513, 12386, -19468, 39814, -27649, 16699, -15363, 41651, 2491, -31019, -5399, 5481, 8694, -7578, 32731, -13623, -23406, 12191, 8731, -6692, 5165, 23986, 9845, -8174, 8545, -25271, 37145, -9818, 8028, -8361, 35186, -12268, -27952, 17501, 42903, -31978, 17167, -16033, 18173, -35156, -9311, 21583].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 31, 0, 0, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 0, 0, 0, 0, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 32, 0, 0, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 0, 0, 0, 0, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![835, 792, 1536, 1462, 2297, 1897, 136, 858, 1610, 246, 31, 1799, 1616, 2062, 1682, 0, 2229, 0, 0, 1713, 678, 2157, 1367, 1648, 1702, 1280, 596, 1067, 1089, 2225, 731, 2238, 1988, 2052, 2264, 2176, 2240, 0, 0, 0, 0, 1170, 1695, 1031, 316, 1411, 1168, 1377, 1567, 2062, 966, 1646, 905, 1408, 1824, 1494, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![10588, 10588, 81961, 49020, 89804, 56863, 80000, 5490, 25490, 58431, 54902, 76471, 65882, 99216, 89804, -22613, 18039, 11624, -30388, 9804, 49412, 98431, 66667, 47843, 73333, 72941, 78431, 20784, 27451, 39216, 21176, 11373, 45098, 9020, 89804, 36863, 21569, -25421, 10888, 45423, 331, 41961, 43137, 85490, 81176, 67843, 67843, 66667, 93333, 66275, 26275, 59608, 96078, 23529, 85098, 38039, 61961, 30935, -23321, 65513, 12386, -19468, 39814, -27649, 16699, -15363, 41651, 2491, -31019, -5399, 5481, 8694, -7578, 32731, -13623, -23406, 12191, 8731, -6692, 5165, 23986, 9845, -8174, 8545, -25271, 37145, -9818, 8028, -8361, 35186, -12268, -27952, 17501, 42903, -31978, 17167, -16033, 18173, -35156, -9311, 21583].span()
    };
    
    let tree_11 = xgb_inference::Tree {
    base_weights: array![-1219, -79694, -438, -26915, -136059, -15969, 3119, 46021, -84193, -43186, -5976, -5558, -38167, -31758, 5696, -27090, 103981, -38540, 72542, -15661, 27211, 3527, -55581, 29188, -42540, 19391, -3095, -13868, 143882, 47600, -12028, -12051, -96048, -51131, 42111, 27549, -73116, -66850, 24168, -31644, 92399, -49088, 61136, 8972, 38514, -22584, 7981, -197, 52082, -4483, 29055, 16964, -33917, 14800, -22428, 29106, 1815, 3500, 38877, -30280, 8042, -312, -23883, -13115, 34202, -35934, 5994, -7463, 41747, 360, -19141, -11668, 47177, 6663, -3049, 21205, 4726, 250, -11790, 5985, -3362].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 21, 23, 25, 0, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 45, 0, 47, 0, 0, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 22, 24, 26, 0, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 46, 0, 48, 0, 0, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1516, 771, 499, 1599, 1714, 954, 787, 1626, 1846, 0, 0, 1241, 2139, 1549, 1407, 0, 354, 0, 1238, 591, 2141, 886, 464, 2025, 827, 1892, 788, 0, 882, 0, 0, 859, 891, 1429, 1522, 740, 1345, 84, 1793, 954, 744, 1069, 1640, 1511, 1372, 1651, 1696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6667, 41176, 41176, 34902, 71373, 56471, 22353, 8235, 56078, -43186, -5976, 52157, 38431, 24706, 60784, -27090, 14118, -38540, 40784, 69804, 27451, 62745, 78431, 22745, 74902, 52549, 58431, -13868, 8235, 47600, -12028, 66667, 17647, 29804, 53725, 49804, 72941, 21961, 62745, 21176, 29020, 31765, 74510, 51373, 56078, 57647, 72157, -197, 52082, -4483, 29055, 16964, -33917, 14800, -22428, 29106, 1815, 3500, 38877, -30280, 8042, -312, -23883, -13115, 34202, -35934, 5994, -7463, 41747, 360, -19141, -11668, 47177, 6663, -3049, 21205, 4726, 250, -11790, 5985, -3362].span()
    };
    
    let tree_12 = xgb_inference::Tree {
    base_weights: array![-1040, -287, -73303, -1138, 76369, -109182, 12099, -2132, 64662, 100584, -84837, 26453, -120230, 86233, -65799, 335, -22264, 103735, -34843, -78145, 115329, -30925, 523, 10886, -129481, -14249, 138515, 17215, -29680, -4714, 14387, 19531, -32380, 119100, -63876, 65097, -68665, -28803, -5516, -33554, 127904, 10410, -138380, 49476, 4889, 1611, -4311, -5223, 7664, -3396, 25043, -15578, -2602, 11626, 45205, -33151, 10121, -20149, 39190, 29252, -30107, 13203, -25301, 40942, -10796, -6961, -42748].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 23, 25, 27, 29, 31, 33, 35, 37, 39, 0, 0, 0, 41, 0, 43, 0, 0, 45, 47, 49, 51, 53, 55, 57, 59, 0, 0, 61, 63, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 24, 26, 28, 30, 32, 34, 36, 38, 40, 0, 0, 0, 42, 0, 44, 0, 0, 46, 48, 50, 52, 54, 56, 58, 60, 0, 0, 62, 64, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2232, 1850, 1127, 1751, 1569, 1613, 1424, 1551, 1651, 728, 38, 0, 1985, 895, 1946, 2036, 1454, 1512, 52, 1197, 2140, 0, 0, 0, 1197, 0, 2116, 0, 0, 1407, 554, 1934, 835, 1990, 405, 2273, 1596, 0, 0, 63, 2082, 0, 1762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![94902, 93333, 89804, 91765, 91765, 17255, 91765, 79216, 83529, 16471, 86275, 26453, 21569, 67059, 63137, 63529, 77255, 91765, 25098, 35686, 33725, -30925, 523, 10886, 10196, -14249, 86667, 17215, -29680, 54118, 60784, 78431, 72941, 60392, 94510, 60392, 65490, -28803, -5516, 35294, 95686, 10410, 24706, 49476, 4889, 1611, -4311, -5223, 7664, -3396, 25043, -15578, -2602, 11626, 45205, -33151, 10121, -20149, 39190, 29252, -30107, 13203, -25301, 40942, -10796, -6961, -42748].span()
    };
    
    let tree_13 = xgb_inference::Tree {
    base_weights: array![-793, -19461, 2125, 12469, -41842, -17067, 6525, -19944, 31559, 25234, -50976, 21973, -26240, 17112, -1833, -28789, 142739, 55595, -29145, -18321, 113032, -2033, -63448, -17766, 49273, -43156, -9414, 25790, -11857, -17138, 7924, 17329, -52940, -8371, 62158, 72523, -27949, -103334, 7530, -79820, 41823, -25361, 146658, -48624, 43185, -78001, -20511, 22780, -68564, -12719, 76413, -17012, -68848, 104253, -16720, 9206, 47681, -24783, 61839, 8305, -30843, 46041, 2241, -19274, 23114, -21000, 9214, 12406, 37212, -25900, 15954, 19040, -39535, -18372, 28761, 22348, -30458, 40898, -5110, 3067, 53895, 22231, -21346, 37711, -18, -24234, 29422, 13264, -18698, 28746, -11699, -27035, 25406, 16763, -22881, 29944, -5764, -10247, 17709, 44777, -21679, 42843, -11474, 3170, -13283, 4082, -25075, 18445, 2433, 9396, -9833, 28540, -7350, -10677, 9724, 5796, -12070, -28937, 16868, -5480, 4394].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 0, 0, 67, 69, 71, 73, 75, 77, 0, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 0, 0, 68, 70, 72, 74, 76, 78, 0, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1364, 1473, 747, 1894, 1332, 1601, 1711, 2224, 943, 1955, 723, 1776, 1896, 896, 884, 1067, 2187, 2037, 222, 787, 1102, 1254, 1804, 1415, 808, 1570, 2077, 1331, 1614, 1272, 1760, 5, 816, 0, 0, 1285, 1267, 544, 493, 1993, 1993, 0, 1835, 1616, 1169, 2005, 1517, 578, 452, 804, 1468, 1191, 440, 1020, 1507, 2046, 1917, 1861, 1992, 1088, 1760, 1258, 1901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![35686, 38824, 38039, 23922, 38824, 31765, 54510, 62353, 46275, 47059, 10980, 25490, 45882, 61961, 56471, 21569, 21569, 49804, 36471, 30980, 9020, 18824, 60392, 47451, 25882, 40784, 5882, 61569, 72549, 66667, 53333, 10980, 67059, -8371, 62158, 39216, 41569, 18039, 43922, 10980, 32941, -25361, 25882, 34118, 36078, 96471, 64314, 12549, 81569, 21961, 59608, 53725, 784, 61569, 57647, 69020, 66275, 18824, 70980, 55686, 52157, 35294, 62745, -19274, 23114, -21000, 9214, 12406, 37212, -25900, 15954, 19040, -39535, -18372, 28761, 22348, -30458, 40898, -5110, 3067, 53895, 22231, -21346, 37711, -18, -24234, 29422, 13264, -18698, 28746, -11699, -27035, 25406, 16763, -22881, 29944, -5764, -10247, 17709, 44777, -21679, 42843, -11474, 3170, -13283, 4082, -25075, 18445, 2433, 9396, -9833, 28540, -7350, -10677, 9724, 5796, -12070, -28937, 16868, -5480, 4394].span()
    };
    
    let tree_14 = xgb_inference::Tree {
    base_weights: array![-787, -19025, 1819, -3129, -40452, 7359, -8798, -10867, 71075, -60582, -11256, 3234, 42879, -21290, 5974, 31025, -28682, -27241, 125535, 65313, -65276, 99862, -22570, 843, 75718, 56846, -8514, 17561, -30489, 32063, -12156, -4736, 74931, -81759, -14163, -73355, 72595, 178853, -12886, 117500, -17781, -8351, -75436, -45101, 182145, 25321, -48720, -167, 113881, -33019, 98273, 75867, 10767, -42906, 80925, 45116, -55645, 37413, -34844, -59910, 48155, -26312, 31121, 9484, -21398, -509, 35658, -27512, 21945, -7322, 18706, 14998, -30861, -9652, 40497, -17498, 62201, -19957, 23874, 6184, 48220, -20289, 19249, -24720, 10072, 6250, -23739, 72253, -5560, -16279, 20629, -26899, 1948, 3404, -3056, 45050, -19842, 31355, -25066, 42543, 9595, -18474, 25346, -10793, 15328, 11063, -23276, -8086, 42597, -12853, 23392, 41404, -21582, -29839, 21080, -20707, -7987, -27073, 18559, 718, 21930, -24094, -4538, -13954, 16107].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 0, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 0, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2085, 1691, 1519, 1039, 754, 1803, 2095, 1613, 1228, 2124, 613, 1707, 2041, 1234, 1666, 1896, 143, 210, 1465, 46, 1668, 2253, 1809, 1610, 2048, 1605, 562, 1657, 1475, 1383, 412, 1382, 585, 2117, 2039, 129, 1512, 591, 202, 2005, 0, 91, 1946, 1871, 1524, 886, 2245, 808, 1514, 2189, 761, 491, 2279, 369, 1514, 749, 1757, 1999, 1317, 1648, 1953, 843, 1989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![27451, 38431, 67843, 75686, 50588, 70588, 69804, 25098, 69020, 5098, 20392, 78431, 76863, 64314, 73333, 23922, 9412, 72941, 79216, 37255, 20000, 25490, 46667, 87059, 46275, 70980, 77255, 70980, 51373, 52157, 89020, 30980, 19608, 77255, 43137, 17647, 43922, 6275, 62353, 30980, -17781, 24706, 77255, 10196, 67843, 52941, 66667, 40392, 87059, 32157, 57255, 11765, 65882, 45098, 66275, 45490, 34510, 27059, 58039, 80784, 70980, 56863, 58824, 9484, -21398, -509, 35658, -27512, 21945, -7322, 18706, 14998, -30861, -9652, 40497, -17498, 62201, -19957, 23874, 6184, 48220, -20289, 19249, -24720, 10072, 6250, -23739, 72253, -5560, -16279, 20629, -26899, 1948, 3404, -3056, 45050, -19842, 31355, -25066, 42543, 9595, -18474, 25346, -10793, 15328, 11063, -23276, -8086, 42597, -12853, 23392, 41404, -21582, -29839, 21080, -20707, -7987, -27073, 18559, 718, 21930, -24094, -4538, -13954, 16107].span()
    };
    
    let tree_15 = xgb_inference::Tree {
    base_weights: array![-738, 792, -31580, -23341, 3114, -66553, -5211, 11750, -37801, -42757, 4355, -76117, 41775, 140503, -14373, 35964, -52150, -74102, -24892, 3155, -69260, 16112, -1749, 1327, -94248, 118662, -39805, 185392, -1931, -40311, 35335, -17085, 66878, -110843, 2573, 71516, -83880, -15764, -82970, -29734, 90774, -79248, 41357, -46799, 19467, -11413, 7216, 70077, -60353, -99049, 18028, 47041, 4086, -25080, 12876, 16855, 65886, -7917, -87956, 90001, -30485, -15847, 19523, 39448, 9965, -38477, -4817, 20495, -29295, -20884, 46678, -26972, 22101, -9994, 7556, -29664, 20782, -17770, 26372, 42981, -3329, -26393, 21371, 40484, -24684, -696, -28751, 13703, 3473, 4748, -5645, -18709, 3064, 41670, -9898, -33403, 19419, 14457, -31370, -13576, 24132, 17068, -29960, -16795, 38073, -30422, 14385].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 0, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 0, 0, 0, 0, 0, 0, 0, 99, 101, 103, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 0, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 0, 0, 0, 0, 0, 0, 0, 100, 102, 104, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1537, 1179, 96, 1406, 1414, 994, 916, 2041, 48, 1421, 866, 612, 1053, 1607, 835, 1265, 2034, 1982, 741, 2207, 1316, 1356, 1983, 1705, 25, 948, 1048, 926, 0, 1083, 2269, 86, 1473, 990, 805, 683, 18, 2269, 2286, 1837, 1401, 403, 1359, 1366, 1406, 1712, 1126, 1767, 1418, 888, 0, 0, 0, 0, 0, 0, 0, 1335, 579, 2212, 1602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![99216, 34118, 99216, 31765, 18039, 83529, 21176, 36078, 15294, 36078, 27451, 35686, 65882, 69412, 66667, 23922, 34510, 8627, 76078, 60784, 76078, 22745, 55294, 48627, 98039, 85098, 91373, 36863, -1931, 69804, 70196, 46667, 21961, 58039, 44706, 58039, 91373, 58039, 84706, 58039, 48627, 87451, 78431, 53725, 47059, 34510, 41176, 45490, 76471, 23137, 18028, 47041, 4086, -25080, 12876, 16855, 65886, 69412, 30980, 40000, 74118, -15847, 19523, 39448, 9965, -38477, -4817, 20495, -29295, -20884, 46678, -26972, 22101, -9994, 7556, -29664, 20782, -17770, 26372, 42981, -3329, -26393, 21371, 40484, -24684, -696, -28751, 13703, 3473, 4748, -5645, -18709, 3064, 41670, -9898, -33403, 19419, 14457, -31370, -13576, 24132, 17068, -29960, -16795, 38073, -30422, 14385].span()
    };
    
    let tree_16 = xgb_inference::Tree {
    base_weights: array![-678, 451, -37992, -9597, 4760, -56145, 24497, 6644, -18696, 24631, 1069, -74805, 24200, 72874, -71563, -34604, 16598, -35191, 1049, 34511, -20118, 19565, -2966, -35441, -104201, 98281, -46865, -37643, 123521, -34472, 17432, -47831, 59027, 27166, -16416, -11504, -52166, 18264, -26636, -24398, 44034, 67212, -32723, -2090, 35069, -33280, 218, 90152, -56774, -112759, 25156, -19091, 131957, 52209, -97413, -88731, 29395, 151447, -17018, 26404, -24386, -27878, -8418, 49783, -4010, 3947, 22174, -20473, 7047, -13993, 11886, 1414, -18622, 29416, 2878, -13088, 14045, -23515, 7748, 9068, 26145, 32077, -16028, -25226, -1556, 3686, -19490, 21451, 5874, 9246, -13900, -8815, 1165, -11782, 46790, -26845, 10617, -37166, 1105, 32151, -19724, -2661, 49388, -13036, 34836, 4226, -36624, -7013, -29903, 51619, -2499].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 0, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 0, 101, 103, 105, 107, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 0, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 102, 104, 106, 108, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![879, 1798, 42, 1600, 2100, 609, 1815, 1124, 797, 1000, 2267, 1565, 487, 70, 1131, 819, 881, 1666, 864, 1114, 955, 2050, 2233, 1440, 584, 734, 84, 1898, 1705, 0, 1277, 884, 1643, 1989, 1980, 1336, 1597, 1067, 305, 2154, 1382, 1522, 2197, 1470, 1669, 1141, 602, 867, 93, 2273, 207, 0, 1900, 2252, 2142, 1353, 0, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![87451, 38431, 86275, 34902, 20392, 84706, 83137, 25490, 45882, 64314, 20000, 61569, 74510, 67059, 89020, 58431, 48235, 39608, 59216, 35686, 13333, 52157, 31373, 12941, 94510, 48235, 60392, 77647, 85098, -34472, 92941, 13333, 18039, 41176, 34118, 40000, 36471, 29020, 82745, 14118, 59608, 80392, 8235, 68627, 57647, 31373, 40784, 5490, 61961, 91765, 83529, -19091, 50196, 49020, 34118, 59608, 29395, 90588, -17018, 26404, -24386, -27878, -8418, 49783, -4010, 3947, 22174, -20473, 7047, -13993, 11886, 1414, -18622, 29416, 2878, -13088, 14045, -23515, 7748, 9068, 26145, 32077, -16028, -25226, -1556, 3686, -19490, 21451, 5874, 9246, -13900, -8815, 1165, -11782, 46790, -26845, 10617, -37166, 1105, 32151, -19724, -2661, 49388, -13036, 34836, 4226, -36624, -7013, -29903, 51619, -2499].span()
    };
    
    let tree_17 = xgb_inference::Tree {
    base_weights: array![-676, 1908, -16232, -1372, 24337, -32633, 9254, 1954, -31104, -19883, 37714, 8713, -44758, -61985, 17746, 5913, -19847, -84987, -22155, 29766, -47917, 52702, 1780, -45281, 50428, -49660, 42378, 18131, -102959, 47780, -1409, -1151, 24227, -37162, 11425, -100837, 71428, 9414, -40415, 64923, -59003, -66590, 60844, 39384, 107727, -29342, 41473, -72487, 87291, 93851, -21874, -57377, 11878, 83857, -22724, -67085, 104348, -120178, 18593, -58939, 61538, 24250, -34571, 268, -17656, 13019, 1758, -16626, 3501, 8072, -22385, -35361, 1698, -12139, 44110, -33725, 6849, 32295, -13797, 32061, -8840, 16994, -32111, 13833, -24567, 45218, -1159, -27871, 13299, 2168, 37535, 17407, -16100, -374, 30658, 20081, -26691, -24840, 42334, -10588, 36428, -23677, 16107, 6061, -19098, 18519, -14121, -21155, 35895, -27653, 3575, 49142, -13172, 719, -39174, 24478, -27009, 28079, 3956, -3791, 20603, 13754, -16604].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 0, 109, 111, 113, 0, 115, 117, 119, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 0, 110, 112, 114, 0, 116, 118, 120, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1644, 1934, 737, 927, 1497, 1548, 1276, 1552, 928, 2174, 1247, 702, 1654, 597, 1787, 1261, 944, 978, 806, 1929, 1014, 225, 2278, 2032, 1342, 1115, 1558, 582, 1516, 1744, 1745, 2132, 1454, 2175, 1555, 1887, 2228, 1694, 898, 1697, 57, 1323, 1231, 194, 2234, 518, 400, 1370, 843, 1694, 1898, 2101, 1598, 1511, 0, 694, 781, 1950, 0, 595, 1655, 1889, 1356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![76078, 70588, 72157, 72941, 56863, 75686, 49020, 68235, 71373, 55686, 70980, 51373, 92941, 69412, 77255, 67059, 61569, 77255, 48627, 58824, 78824, 79216, 72941, 86667, 61961, 91765, 93725, 79216, 82745, 50196, 80784, 71765, 63922, 65882, 80784, 67059, 47059, 10980, 21961, 68627, 16078, 37255, 55686, 3529, 52549, 33725, 80392, 26667, 30588, 45882, 69020, 7843, 87059, 55294, -22724, 78431, 79608, 13333, 18593, 58039, 76863, 76471, 82745, 268, -17656, 13019, 1758, -16626, 3501, 8072, -22385, -35361, 1698, -12139, 44110, -33725, 6849, 32295, -13797, 32061, -8840, 16994, -32111, 13833, -24567, 45218, -1159, -27871, 13299, 2168, 37535, 17407, -16100, -374, 30658, 20081, -26691, -24840, 42334, -10588, 36428, -23677, 16107, 6061, -19098, 18519, -14121, -21155, 35895, -27653, 3575, 49142, -13172, 719, -39174, 24478, -27009, 28079, 3956, -3791, 20603, 13754, -16604].span()
    };
    
    let tree_18 = xgb_inference::Tree {
    base_weights: array![-676, -42193, 284, 2758, -67592, 21050, -1962, 45423, -74055, 5159, -81631, 30903, -39992, -12874, 1997, -66482, 84779, 21105, -108309, -81176, 88280, -98592, 2929, 15239, 73036, -83058, -861, 685, -24084, 16614, -4102, 6664, -28224, -32375, 133140, -36294, -1168, 3079, -32223, 139514, -12511, -118503, -30184, 94911, -30428, -22400, 30159, -63691, 86419, 3637, -123560, 33432, -95201, -9000, 50804, -33943, 6649, 30997, -10111, 20442, -8899, -23653, 19213, 52026, 1702, 47752, 13112, -37143, 1777, 23273, -26151, -7270, 41092, 20743, -11317, 14129, -5801, 17780, -27607, 29824, -15276, -30162, 26986, -41080, 90, -16942, 23367, -36751, 9621, 11470, -5386, -6132, 23462, -21596, -7638, 16627, -5822, 866, 14623, -5596, 19397, -7998, 10616, -8262, -87].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 0, 0, 61, 63, 0, 0, 0, 0, 65, 0, 67, 69, 71, 0, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 0, 62, 64, 0, 0, 0, 0, 66, 0, 68, 70, 72, 0, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1202, 2265, 1058, 813, 2126, 2268, 2278, 1956, 792, 1838, 2053, 242, 2269, 695, 1760, 745, 593, 0, 1779, 1554, 1696, 1940, 1623, 1690, 1901, 58, 1933, 1744, 1039, 896, 1662, 0, 0, 993, 252, 0, 0, 0, 0, 1632, 0, 2246, 1597, 1564, 0, 2283, 690, 1441, 584, 1128, 963, 1937, 784, 1650, 692, 640, 1883, 1382, 1663, 1807, 844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1569, 2353, 9804, 35294, 8235, 65098, 37647, 18431, 29020, 31765, 70196, 21961, 76471, 49412, 44314, 32549, 30196, 21105, 4314, 14902, 65098, 65882, 75686, 19216, 17255, 14510, 85882, 52941, 69412, 47843, 46667, 6664, -28224, 62353, 54510, -36294, -1168, 3079, -32223, 4314, -12511, 76078, 53333, 50980, -30428, 11765, 63137, 1176, 74118, 58039, 23922, 45490, 67843, 18431, 30588, 34118, 33725, 43137, 72941, 46275, 50980, -23653, 19213, 52026, 1702, 47752, 13112, -37143, 1777, 23273, -26151, -7270, 41092, 20743, -11317, 14129, -5801, 17780, -27607, 29824, -15276, -30162, 26986, -41080, 90, -16942, 23367, -36751, 9621, 11470, -5386, -6132, 23462, -21596, -7638, 16627, -5822, 866, 14623, -5596, 19397, -7998, 10616, -8262, -87].span()
    };
    
    let tree_19 = xgb_inference::Tree {
    base_weights: array![-654, -50049, 110, -92504, -20370, 6542, -5990, 20541, -112731, 15830, -68027, 2300, 32794, -73979, -4317, -15621, 34792, -121145, 2968, -82303, 52548, -100935, 75599, 751, 64431, 65127, 501, -23902, -101871, -12582, 9048, -4638, -38033, -515, -29987, 117233, -6473, -36395, 3840, 36536, -3288, 5455, -23025, 120297, -22010, 83447, -22428, -15728, 64802, -59438, 106060, 14947, -114026, -14648, 48806, 22975, -13833, -8242, 43962, -29080, 17024, 1007, 23144, 27508, -7888, 42878, 1628, -29292, 6390, -7175, 29110, 8714, -25655, 10419, -11607, 41448, -7509, -24232, 24458, -797, 44595, -36581, 9250, -5066, 12027, 33478, 1809, 3006, 18795, 6360, -8920].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 31, 0, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 0, 0, 0, 0, 57, 59, 0, 0, 0, 0, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 0, 81, 83, 85, 87, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 32, 0, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 0, 0, 0, 0, 58, 60, 0, 0, 0, 0, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 0, 82, 84, 86, 88, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![47, 1144, 1272, 2193, 2292, 1799, 1365, 1717, 1392, 2003, 876, 1750, 1895, 1649, 1134, 0, 0, 2269, 0, 751, 1807, 673, 538, 1205, 1596, 111, 922, 1600, 199, 1752, 1615, 0, 0, 0, 0, 592, 1234, 0, 0, 0, 0, 1846, 886, 1602, 1898, 1167, 1413, 1588, 837, 352, 631, 0, 1700, 1848, 1442, 1283, 1473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![392, 29804, 66667, 784, 43529, 65490, 27843, 16078, 74510, 25098, 75294, 71765, 64314, 34902, 76471, -15621, 34792, 392, 2968, 24706, 41176, 54118, 64706, 68235, 61569, 74510, 76078, 37255, 3922, 87059, 79216, -4638, -38033, -515, -29987, 30588, 67059, -36395, 3840, 36536, -3288, 70588, 13333, 69412, 48235, 37647, 69804, 29020, 77647, 75294, 34510, 14947, 78431, 84706, 40000, 85098, 79608, -8242, 43962, -29080, 17024, 1007, 23144, 27508, -7888, 42878, 1628, -29292, 6390, -7175, 29110, 8714, -25655, 10419, -11607, 41448, -7509, -24232, 24458, -797, 44595, -36581, 9250, -5066, 12027, 33478, 1809, 3006, 18795, 6360, -8920].span()
    };
    
    let tree_20 = xgb_inference::Tree {
    base_weights: array![-515, 312, -44602, -1242, 28612, -75015, 11589, -790, -98700, -74404, 33549, 211, -90871, 51655, -74463, -59997, -125, -128407, 47103, -104311, 14981, 54608, -2360, -61413, 76658, -99162, 8513, -45882, 105665, -32556, 8895, -69361, 25421, 2090, -16931, -40582, -7531, 31157, -9541, -6299, -34515, -55343, 64061, -43151, 55363, 9818, -27846, 33709, -4890, -39556, -113626, -31199, 20702, 142756, -6114, 14714, -24630, 1056, -10480, -9089, 3961, 15405, -42336, 7008, 26674, -18664, 19666, -22674, 24413, -26310, 21828, -5415, -35700, 8162, 47314, 19102, -20939].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 0, 41, 43, 45, 47, 49, 0, 51, 53, 0, 0, 55, 0, 57, 59, 0, 0, 0, 0, 0, 0, 61, 63, 65, 67, 0, 0, 0, 0, 69, 71, 0, 0, 73, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 0, 42, 44, 46, 48, 50, 0, 52, 54, 0, 0, 56, 0, 58, 60, 0, 0, 0, 0, 0, 0, 62, 64, 66, 68, 0, 0, 0, 0, 70, 72, 0, 0, 74, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![839, 221, 557, 2042, 1365, 126, 1616, 847, 1263, 452, 1456, 1530, 1809, 1998, 1857, 614, 975, 1047, 1458, 364, 0, 1590, 836, 703, 1312, 607, 0, 560, 2258, 0, 0, 307, 0, 1344, 1933, 0, 0, 0, 0, 0, 0, 1066, 842, 1309, 1379, 0, 0, 0, 0, 545, 300, 0, 0, 1897, 1503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![92549, 88627, 90196, 94902, 28235, 28235, 92157, 3529, 86667, 89020, 80392, 42745, 95294, 70980, 95686, 83922, 76471, 87843, 82745, 54118, 14981, 8627, 78824, 19608, 92549, 34902, 8513, 94118, 67059, -32556, 8895, 10980, 25421, 99608, 76078, -40582, -7531, 31157, -9541, -6299, -34515, 60784, 67451, 92941, 76863, 9818, -27846, 33709, -4890, 70980, 13333, -31199, 20702, 58431, 88627, 14714, -24630, 1056, -10480, -9089, 3961, 15405, -42336, 7008, 26674, -18664, 19666, -22674, 24413, -26310, 21828, -5415, -35700, 8162, 47314, 19102, -20939].span()
    };
    
    let tree_21 = xgb_inference::Tree {
    base_weights: array![-472, -67182, 53, 60526, -85634, -11494, 2954, -9244, 30932, 7800, -103531, 10670, -24017, -16946, 5625, -18979, 29369, -37566, -37206, 35843, -15016, -57264, -13377, 3350, -32794, 14003, -3171, -78983, 16413, -3855, 69079, -31219, 39344, 61540, -63718, 38770, -21547, -34289, 23153, 74483, -38481, 8649, 46912, 38534, -6380, -2592, -28878, -4547, 29497, -10140, 25699, -706, -20854, -19756, 24571, -21526, 46837, 17369, -20524, -21161, 17960, 14028, -8752, 6828, -18113, -5189, 18221, -22278, 40202, -13691, 19189, 3738, -8272, 21533, 7682, 21431, -7124, -18963, -1049].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 17, 19, 21, 23, 25, 0, 0, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 45, 0, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 18, 20, 22, 24, 26, 0, 0, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 46, 0, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1516, 588, 834, 29, 6, 1598, 594, 0, 0, 151, 1208, 1760, 2094, 1623, 1518, 0, 0, 1350, 0, 2278, 1838, 1812, 1042, 132, 837, 1278, 1566, 1496, 0, 1809, 1211, 434, 0, 146, 1190, 1508, 1158, 1025, 2153, 337, 751, 850, 656, 1290, 1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6275, 11765, 28627, 23137, 9020, 33333, 34902, -9244, 30932, 28235, 36863, 32549, 33333, 41569, 62353, -18979, 29369, 26275, -37206, 24706, 40392, 2745, 27059, 23529, 20392, 72941, 58824, 12157, 16413, 38039, 26667, 25098, 18039, 16863, 8235, 28235, 14510, 39608, 28235, 7451, 81961, 69020, 60784, 65882, 39608, -2592, -28878, -4547, 29497, -10140, 25699, -706, -20854, -19756, 24571, -21526, 46837, 17369, -20524, -21161, 17960, 14028, -8752, 6828, -18113, -5189, 18221, -22278, 40202, -13691, 19189, 3738, -8272, 21533, 7682, 21431, -7124, -18963, -1049].span()
    };
    
    let tree_22 = xgb_inference::Tree {
    base_weights: array![-469, -48031, 180, -56465, 29322, -882, 27917, -18832, -99883, 684, -22482, 42062, -32518, -69381, 45052, -22130, -118112, 1820, -36259, -50679, -7177, -64626, 52074, -37695, -2328, -105270, -16634, 97973, -53457, 16002, -25772, -36822, -7558, 978, 49346, -72428, -8479, -11417, -78498, -44674, 16726, 8430, -92280, 60882, -88031, -63435, 35608, -9784, -33508, 25285, -19920, -15365, 38696, 15452, -30749, 404, -33912, -15635, 20183, 25756, -24545, 28050, -6923, -20568, 9207, 18937, -27052, 31545, -17368, -7, 23078, -32855, 1608, 41893, 14100, 3488, -33346, 7312, -29335, 26543, -17513].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 45, 47, 49, 51, 53, 0, 0, 0, 0, 55, 57, 59, 61, 63, 65, 67, 69, 0, 71, 73, 75, 77, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 46, 48, 50, 52, 54, 0, 0, 0, 0, 56, 58, 60, 62, 64, 66, 68, 70, 0, 72, 74, 76, 78, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1584, 1344, 136, 187, 0, 1483, 2229, 1954, 1671, 2062, 2250, 179, 2273, 1679, 2065, 627, 1172, 611, 1583, 723, 1679, 1515, 127, 0, 432, 737, 317, 343, 1415, 0, 0, 0, 0, 905, 25, 1883, 1092, 1021, 1265, 1832, 905, 0, 27, 916, 1995, 50, 1748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![392, 50980, 95294, 21176, 29322, 86667, 76863, 52941, 24314, 97647, 66275, 20000, 63137, 2745, 1961, 10980, 85490, 89804, 92941, 44314, 91373, 34118, 100000, -37695, 64706, 22745, 29412, 392, 49804, 16002, -25772, -36822, -7558, 96471, 35294, 17647, 30588, 45098, 36078, 15294, 92549, 8430, 52941, 21176, 31765, 18824, 83529, -9784, -33508, 25285, -19920, -15365, 38696, 15452, -30749, 404, -33912, -15635, 20183, 25756, -24545, 28050, -6923, -20568, 9207, 18937, -27052, 31545, -17368, -7, 23078, -32855, 1608, 41893, 14100, 3488, -33346, 7312, -29335, 26543, -17513].span()
    };
    
    let tree_23 = xgb_inference::Tree {
    base_weights: array![-467, -52529, 111, 23437, -72049, 824, -39214, -22188, 80553, -83855, 28395, 109, 48918, -57507, 40801, 122132, -11388, -17030, -111388, 1886, -17894, 76133, -29474, -74621, 12267, -25976, 103398, 8276, 43769, -58384, 28378, -50569, -126705, 736, 54850, -20899, 105561, 94108, -37624, -67184, 86058, 195, -89995, -25684, 63543, 21132, -24518, -3622, 39614, -29704, 16664, -27283, 11550, -10721, -39364, 3, 21911, 22780, -16145, -430, -11531, 49613, -18124, 9828, 37868, -28070, 17024, 3882, -31514, 30356, 7294, -22801, 34397, -32362, -5696, 31670, -10708].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 0, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 0, 0, 49, 0, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 0, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 0, 0, 50, 0, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1625, 56, 782, 23, 1856, 1844, 684, 0, 573, 2238, 0, 1465, 1991, 610, 67, 2205, 0, 1954, 2125, 1751, 1944, 1403, 754, 1834, 1935, 536, 593, 0, 0, 817, 0, 1834, 830, 1609, 1596, 1558, 1847, 1905, 2182, 78, 1826, 1845, 1266, 0, 1740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![784, 4314, 89020, 13725, 83137, 90588, 94510, -22188, 2745, 11765, 28395, 81961, 87843, 84706, 86275, 392, -11388, 25098, 29804, 86667, 95686, 90588, 78824, 29412, 58824, 82353, 90588, 8276, 43769, 67843, 28378, 20000, 10588, 89804, 81569, 74510, 84706, 58431, 87451, 34118, 75294, 78431, 89804, -25684, 85490, 21132, -24518, -3622, 39614, -29704, 16664, -27283, 11550, -10721, -39364, 3, 21911, 22780, -16145, -430, -11531, 49613, -18124, 9828, 37868, -28070, 17024, 3882, -31514, 30356, 7294, -22801, 34397, -32362, -5696, 31670, -10708].span()
    };
    
    let tree_24 = xgb_inference::Tree {
    base_weights: array![-347, -32480, 564, 59039, -43745, -100639, 876, -19539, 131011, -718, -64537, -4126, -35434, 31082, -283, 22195, -24696, 6111, 45335, -65539, 37057, -77302, 16172, -28171, 45927, -118543, -1, -93125, 11469, 58227, -25732, 6361, -90999, 91615, -62086, -57757, 41497, 3677, 75538, -5966, -39285, -28564, 1010, -32429, 950, -14437, 27034, -13966, 20767, -29020, 7783, -8698, 43007, -28284, 8438, -22022, 26153, -18214, 27273, 14923, -19211, 37422, 10193, -2663, -21361, 3056, -700].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 0, 23, 25, 0, 0, 0, 0, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 45, 0, 47, 49, 51, 53, 55, 57, 59, 61, 0, 0, 63, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 0, 24, 26, 0, 0, 0, 0, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 46, 0, 48, 50, 52, 54, 56, 58, 60, 62, 0, 0, 64, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![930, 1425, 1597, 2256, 1038, 578, 1980, 886, 1301, 1316, 296, 0, 0, 943, 1023, 0, 0, 0, 0, 1328, 736, 879, 585, 1951, 1594, 878, 2087, 2161, 0, 876, 0, 932, 1771, 1051, 1181, 1874, 1577, 870, 101, 0, 0, 1980, 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![11373, 18039, 1961, 42353, 25098, 784, 6275, 13333, 30588, 34902, 68235, -4126, -35434, 29412, 3137, 22195, -24696, 6111, 45335, 61569, 48235, 3922, 75686, 52157, 18039, 12157, 15294, 74510, 11469, 5098, -25732, 18431, 91765, 43137, 69412, 76078, 14902, 18039, 23137, -5966, -39285, 50196, 34510, -32429, 950, -14437, 27034, -13966, 20767, -29020, 7783, -8698, 43007, -28284, 8438, -22022, 26153, -18214, 27273, 14923, -19211, 37422, 10193, -2663, -21361, 3056, -700].span()
    };
    
    let tree_25 = xgb_inference::Tree {
    base_weights: array![-334, -4092, 6688, 3218, -12597, 23194, -1160, -414, 39505, 29425, -18013, -31413, 29657, -40795, 3831, 1976, -55474, 50387, -65123, -30457, 49360, -31216, -2329, 74399, -58667, -12224, 40306, 44605, -57257, 25197, -3907, -6307, 16647, -114917, -21687, -42788, 59970, -116416, 80149, 15365, -89317, 61350, -51735, 9675, -38739, -14824, 26741, -21146, 110340, -78912, 77200, 25587, -57887, 62135, 11861, 99208, -39765, -81351, 9524, 4738, 55644, -22190, 10261, -870, -15534, 8671, -5238, -40417, 3381, 10758, -18077, -22169, 23136, 20865, -20426, 2143, -41651, 37892, -3873, -25198, 19905, -31651, 11055, -30056, 20615, 20470, -30563, -5889, 22140, -15696, -477, 2284, -11826, 1344, 19518, -7721, 42324, -27669, 18526, -23220, 42968, -234, 38482, 19615, -22918, 829, 22969, 24104, -1249, -14627, 38629, 26463, -27558, -28141, 4975, 17791, -23077, -2411, 21525, -17057, 20485, -11920, 1447, 14972, -2612].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 0, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 0, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1901, 1663, 1601, 1712, 1761, 1947, 1751, 2235, 321, 2283, 2052, 1716, 1856, 1761, 1959, 2046, 15, 1274, 505, 1616, 1513, 1283, 8, 1384, 88, 2045, 1659, 1021, 737, 2055, 1192, 2093, 938, 1017, 1364, 1760, 1946, 889, 1022, 1017, 2066, 1968, 1576, 1622, 1952, 1668, 1421, 0, 281, 2043, 1641, 2018, 755, 1171, 1710, 692, 2062, 119, 1021, 2029, 1944, 1430, 1619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![60000, 49020, 55294, 51373, 34902, 50196, 40000, 74118, 78431, 29412, 54510, 42745, 52941, 45882, 35294, 42353, 34902, 35686, 85098, 56863, 76863, 48627, 61176, 18039, 85882, 60000, 66275, 69804, 72157, 21961, 69804, 44314, 60784, 74118, 56471, 63529, 71765, 35686, 73333, 36471, 72157, 2353, 20392, 47843, 58431, 65882, 70196, -21146, 20000, 80784, 42353, 69804, 21176, 43137, 57255, 38824, 15294, 89412, 79608, 79216, 47843, 66667, 70588, -870, -15534, 8671, -5238, -40417, 3381, 10758, -18077, -22169, 23136, 20865, -20426, 2143, -41651, 37892, -3873, -25198, 19905, -31651, 11055, -30056, 20615, 20470, -30563, -5889, 22140, -15696, -477, 2284, -11826, 1344, 19518, -7721, 42324, -27669, 18526, -23220, 42968, -234, 38482, 19615, -22918, 829, 22969, 24104, -1249, -14627, 38629, 26463, -27558, -28141, 4975, 17791, -23077, -2411, 21525, -17057, 20485, -11920, 1447, 14972, -2612].span()
    };
    
    let tree_26 = xgb_inference::Tree {
    base_weights: array![-440, 96, -48565, -1937, 13999, 56247, -76887, -40847, -617, 24614, -9437, -17911, 102290, -95078, 15567, -5426, -76310, -11616, 2845, 39674, 1140, -54380, 8461, 140257, -3805, -115135, -2955, 35069, -67398, -51192, 46177, 4279, -96129, 4370, -29813, 4491, -31326, 32205, 127605, -47105, 29275, -66056, 62591, -2675, 107984, 50952, 6306, 8484, -124335, 68488, -21770, -25992, -2577, 4049, -26229, -19452, 21268, -14974, 37201, -31321, 15175, -1267, 13973, -16071, -3398, 1044, 23050, -14452, 8906, 12483, -15381, -10683, 49223, 6188, -21790, -22902, 12751, -22846, 20031, 33811, -12131, 3049, -24596, 38765, -10238, -38786, -6217, -700, 31166].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 0, 47, 49, 0, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 0, 0, 0, 85, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 0, 48, 50, 0, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 0, 0, 0, 86, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1386, 91, 212, 1606, 2099, 1584, 2261, 775, 795, 916, 259, 0, 1544, 69, 1947, 242, 1909, 1406, 1568, 1762, 2125, 2098, 1860, 1614, 0, 1060, 80, 0, 1255, 53, 278, 1863, 106, 1844, 2050, 1472, 659, 1468, 2272, 1133, 293, 2259, 2047, 1243, 411, 0, 0, 0, 1754, 1754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![100000, 82353, 30588, 13333, 72549, 45490, 85882, 36078, 37647, 62353, 58431, -17911, 83922, 86275, 52549, 20000, 15294, 51373, 85882, 78431, 49412, 98824, 95686, 76078, -3805, 23922, 91765, 35069, 74118, 4706, 16471, 16078, 90980, 50196, 38431, 87843, 87451, 78431, 33333, 50980, 29804, 99608, 81569, 97647, 90196, 50952, 6306, 8484, 82745, 67843, -21770, -25992, -2577, 4049, -26229, -19452, 21268, -14974, 37201, -31321, 15175, -1267, 13973, -16071, -3398, 1044, 23050, -14452, 8906, 12483, -15381, -10683, 49223, 6188, -21790, -22902, 12751, -22846, 20031, 33811, -12131, 3049, -24596, 38765, -10238, -38786, -6217, -700, 31166].span()
    };
    
    let tree_27 = xgb_inference::Tree {
    base_weights: array![-442, 21, -55232, -702, 38144, -92774, -5051, 3424, -7080, 67209, -19695, 19322, -108810, 55698, -55915, -286, 34145, -19505, 1731, -55454, 87463, -73172, 54939, -35303, -171, 102079, -20250, -27852, 11996, 1133, -45578, 49202, -4437, 65, -29827, -67003, 4794, 7900, -83967, -64119, 103356, -98665, 16037, 83004, -19235, -407, 38560, 19217, -15334, -75, 17655, -18424, 12463, -6783, 18339, 40310, -4776, -2705, 22182, -19557, -6579, -23893, 26317, 6980, -1965, -30241, -2829, 13653, -35979, 39309, -4862, -34688, 2696, 33316, -1258].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 0, 45, 0, 0, 47, 49, 51, 53, 55, 57, 59, 61, 63, 0, 65, 67, 69, 71, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 0, 46, 0, 0, 48, 50, 52, 54, 56, 58, 60, 62, 64, 0, 66, 68, 70, 72, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2232, 1895, 1316, 1608, 2085, 1413, 1140, 1656, 788, 1105, 840, 0, 2195, 432, 536, 2132, 1058, 1701, 1028, 1501, 1753, 2087, 2135, 0, 0, 1418, 0, 0, 907, 1704, 1219, 1461, 1454, 1793, 1892, 12, 1651, 0, 1071, 848, 700, 474, 0, 1648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![94902, 90196, 80000, 61176, 80392, 12941, 80000, 62745, 60392, 12549, 85490, 19322, 100000, 85490, 81176, 79608, 63137, 52157, 40392, 59216, 40392, 94510, 94118, -35303, -171, 62353, -20250, -27852, 80000, 74510, 87451, 34902, 38824, 67451, 41569, 87843, 66275, 7900, 81176, 30588, 83922, 74118, 16037, 89412, -19235, -407, 38560, 19217, -15334, -75, 17655, -18424, 12463, -6783, 18339, 40310, -4776, -2705, 22182, -19557, -6579, -23893, 26317, 6980, -1965, -30241, -2829, 13653, -35979, 39309, -4862, -34688, 2696, 33316, -1258].span()
    };
    
    let tree_28 = xgb_inference::Tree {
    base_weights: array![-373, 6723, -3612, -18139, 12023, -13300, 2586, 18488, -33838, 17486, -10600, 3689, -22340, 15626, -5556, -32750, 50734, -62114, -9816, -18959, 22887, -41108, 10393, -15082, 23427, -50525, -12101, -15611, 32667, -34931, -324, 31601, -101699, 76788, -28412, -67937, 29827, 7488, -96338, -36985, 50508, 75792, 18761, -56708, 39215, 77840, -3575, 20231, -43323, 34903, -62252, 45647, -58328, -21534, 13818, -70271, -2965, 49789, 1855, 96571, -40334, -52913, 3410, 22834, -21786, 5570, -34864, -16964, 28692, -22212, 28464, -10705, -29230, -3376, 26798, 4237, -33774, 9221, -17491, -21102, 23689, 25878, -22274, 9166, 649, -19681, 19290, -21803, 26555, 34223, -17945, 19217, -6268, -7461, 15963, -15231, 21875, 16804, -5472, -30894, 3617, -21745, 31780, 15058, -19849, 4462, -8968, -9290, 9767, -28674, 5908, 16536, -5155, 17901, -5632, -11923, 6718, -22789, 47761, -13784, 22791, -19693, 11021, 16358, 3].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 0, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 0, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![712, 1324, 2285, 1649, 624, 1453, 1715, 350, 25, 1380, 577, 1171, 884, 1241, 1419, 604, 2118, 1131, 946, 187, 2239, 2165, 1510, 1377, 535, 1475, 820, 1956, 1773, 854, 1562, 2165, 1896, 1275, 1213, 1456, 0, 746, 734, 2094, 2216, 665, 1693, 1319, 832, 1517, 1736, 1801, 1357, 793, 13, 1624, 1764, 852, 564, 1708, 1703, 2154, 1232, 2256, 534, 1066, 2079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![32157, 32549, 47451, 25490, 69412, 45882, 58824, 24706, 35294, 27451, 80392, 47843, 41569, 51373, 52549, 25098, 45882, 72941, 52157, 47451, 9020, 79608, 38824, 42745, 73333, 29412, 68627, 30196, 64706, 19608, 41176, 26275, 7843, 11373, 62745, 41961, 29827, 55294, 18431, 12549, 9804, 40392, 57255, 88235, 35686, 59216, 29412, 27451, 56471, 59608, 78431, 27059, 22745, 30980, 47059, 64706, 36078, 68627, 60784, 27451, 89020, 84314, 21176, 22834, -21786, 5570, -34864, -16964, 28692, -22212, 28464, -10705, -29230, -3376, 26798, 4237, -33774, 9221, -17491, -21102, 23689, 25878, -22274, 9166, 649, -19681, 19290, -21803, 26555, 34223, -17945, 19217, -6268, -7461, 15963, -15231, 21875, 16804, -5472, -30894, 3617, -21745, 31780, 15058, -19849, 4462, -8968, -9290, 9767, -28674, 5908, 16536, -5155, 17901, -5632, -11923, 6718, -22789, 47761, -13784, 22791, -19693, 11021, 16358, 3].span()
    };
    
    let tree_29 = xgb_inference::Tree {
    base_weights: array![-486, -54803, -14, -71804, 46235, 694, -34318, 18280, -81095, 103795, -16885, 1370, -38380, -64749, 9716, -93239, 8952, 1753, 43515, 644, 44197, -70223, 18630, 66408, -75025, -48583, 40341, -101671, 1202, 22044, -18880, 268, 90756, 67476, -45207, -82472, 34533, 79573, -19078, -125, 29822, -92379, -7049, 48905, -85252, 75288, -25437, -31922, -3047, -58, 19341, 35227, -17998, -27593, 24146, -24989, 23895, -27257, 13807, -19492, 28055, 35823, -17991, -20447, 13475, -29973, 10895, -27584, 15812, 28606, -8436, 504, -30393, 1100, 36922, 17201, -19113].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 0, 19, 21, 23, 25, 27, 29, 0, 0, 31, 33, 35, 37, 39, 41, 43, 45, 47, 0, 0, 0, 49, 51, 53, 55, 57, 59, 61, 63, 0, 0, 65, 67, 69, 71, 73, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 0, 20, 22, 24, 26, 28, 30, 0, 0, 32, 34, 36, 38, 40, 42, 44, 46, 48, 0, 0, 0, 50, 52, 54, 56, 58, 60, 62, 64, 0, 0, 66, 68, 70, 72, 74, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1990, 1181, 790, 1274, 1696, 2088, 2185, 0, 229, 787, 0, 1851, 1401, 1805, 542, 1629, 1013, 0, 0, 1750, 1572, 1785, 1648, 2130, 941, 899, 909, 1901, 0, 0, 0, 1658, 1649, 824, 1910, 928, 753, 1856, 1511, 0, 0, 2240, 1944, 399, 1158, 994, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![5098, 84314, 90588, 7451, 47451, 88627, 77647, 18280, 83529, 45882, -16885, 88627, 81569, 9804, 71373, 88627, 19608, 1753, 43515, 95686, 85882, 82353, 77255, 60392, 89804, 60000, 74510, 77255, 1202, 22044, -18880, 91765, 83529, 12941, 94510, 89020, 65490, 90588, 87059, -125, 29822, 91765, 65098, 52941, 29020, 80784, 74118, -31922, -3047, -58, 19341, 35227, -17998, -27593, 24146, -24989, 23895, -27257, 13807, -19492, 28055, 35823, -17991, -20447, 13475, -29973, 10895, -27584, 15812, 28606, -8436, 504, -30393, 1100, 36922, 17201, -19113].span()
    };
    
    let tree_30 = xgb_inference::Tree {
    base_weights: array![-369, -7200, 3105, -3072, -36351, -15115, 6249, 1204, -26114, -18880, -72260, -18619, 77316, 17273, -2204, -7939, 14746, -34232, 50408, -33804, 62166, -82026, 43886, -804, -41784, 147798, -15223, -2740, 26956, -44760, 2230, 3810, -31101, 39261, -5915, -4882, -61763, 115378, -60816, -95790, -17804, 159502, -881, -38026, -56032, -13053, 39564, -15909, 33592, 57848, -48745, 5976, 50132, -26602, 66185, 8580, -43258, 35413, -1632, 60852, -53320, 36652, -3393, -1837, 11605, -14200, 8497, 3463, 20514, -8613, 7919, -11535, 14123, -22784, 16513, 48630, -5412, 13543, -27560, 10283, -33719, 4643, -18271, 56027, 6961, 21209, -22673, -44, -30930, 10327, -9825, 22543, -4715, -11155, 35647, -17484, 3510, 29694, -1343, 16262, -945, 40548, -16116, -13554, 11918, -5780, 13436, 42724, -7124, -19046, 9713, -9868, 17495, 10261, -2439].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 0, 87, 0, 0, 89, 91, 93, 95, 0, 0, 0, 97, 99, 101, 103, 105, 107, 109, 111, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 0, 88, 0, 0, 90, 92, 94, 96, 0, 0, 0, 98, 100, 102, 104, 106, 108, 110, 112, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2036, 1938, 1702, 2087, 1999, 1606, 1697, 1955, 1220, 1087, 2228, 2084, 213, 1985, 1845, 1463, 1573, 1506, 1557, 511, 265, 1515, 787, 1325, 659, 348, 1840, 1839, 722, 1841, 1744, 1800, 1696, 448, 893, 2079, 73, 1230, 1759, 1692, 1653, 1141, 1866, 0, 1037, 0, 0, 929, 1563, 785, 86, 0, 0, 0, 519, 1661, 756, 1171, 245, 28, 850, 1258, 1652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![44314, 52941, 36863, 49804, 58431, 85490, 58039, 45098, 82745, 74510, 81569, 60000, 76471, 49804, 36471, 46667, 56078, 47451, 73333, 28235, 57647, 56078, 74118, 63529, 13725, 21961, 68235, 50980, 67059, 20000, 55294, 41569, 54510, 49412, 54510, 42353, 83137, 86275, 38824, 21961, 55294, 68627, 49804, -38026, 69020, -13053, 39564, 26667, 61176, 46667, 80784, 5976, 50132, -26602, 50588, 39216, 10980, 38824, 85098, 52941, 77647, 59216, 50980, -1837, 11605, -14200, 8497, 3463, 20514, -8613, 7919, -11535, 14123, -22784, 16513, 48630, -5412, 13543, -27560, 10283, -33719, 4643, -18271, 56027, 6961, 21209, -22673, -44, -30930, 10327, -9825, 22543, -4715, -11155, 35647, -17484, 3510, 29694, -1343, 16262, -945, 40548, -16116, -13554, 11918, -5780, 13436, 42724, -7124, -19046, 9713, -9868, 17495, 10261, -2439].span()
    };
    
    let tree_31 = xgb_inference::Tree {
    base_weights: array![-387, 803, -18595, -13839, 2461, -45346, 1986, 10234, -30414, 39732, 1621, -59198, 8210, -7249, 59179, -47086, 21502, -45894, 7825, 57843, -53946, 17827, -287, 6258, -74409, 94685, -45620, 50552, -18361, -21732, 100674, 28277, -78230, 99109, 9595, -60389, -3930, -96396, 21837, -38801, 72670, -85344, 19606, -24772, 29125, -9422, 4883, 54426, -73524, -102353, -31275, -14039, 140471, -31525, 23844, 103260, -21461, 14892, -41431, 54617, -25079, 128157, -5418, -8871, 33233, -27020, 11736, -13463, 39056, 15069, -4315, -14216, -34290, 23003, -8374, -4778, -32597, 25217, -2317, 20092, -29169, -5244, 27850, -32911, 11934, 6558, -17711, 12512, -4139, -3930, 14379, 6211, -347, -22460, 28193, -32269, 1765, 16825, -33474, 12760, -21966, 55585, 5073, 24012, -20409, -11327, 41699, -21694, 23856, -18695, 12723, -24879, -2424, -4627, 27685, 45370, -756].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 0, 85, 87, 89, 91, 93, 95, 97, 99, 0, 101, 0, 103, 105, 107, 109, 111, 113, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 0, 86, 88, 90, 92, 94, 96, 98, 100, 0, 102, 0, 104, 106, 108, 110, 112, 114, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1872, 788, 99, 1695, 1091, 2169, 899, 1354, 1300, 1402, 923, 927, 1697, 2014, 1130, 791, 80, 846, 1881, 468, 1306, 1309, 2274, 971, 1306, 714, 2187, 530, 866, 1133, 1524, 2159, 1355, 1719, 1550, 1326, 1711, 693, 1029, 392, 777, 752, 0, 1994, 2267, 1988, 1500, 2231, 1009, 1515, 688, 0, 1981, 0, 1651, 866, 2030, 1008, 1635, 16, 0, 1541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97255, 25098, 61569, 28235, 13725, 90196, 78039, 17647, 53333, 76863, 20784, 23922, 49412, 24314, 74118, 13725, 9412, 45490, 24706, 5882, 90980, 37647, 43922, 48235, 72157, 29020, 70588, 98824, 88235, 68627, 86667, 55686, 25882, 9804, 22745, 67451, 31373, 15686, 38431, 7059, 22745, 75294, 19606, 35686, 57647, 75294, 55686, 30980, 76078, 16078, 48627, -14039, 58824, -31525, 76863, 45098, 74510, 63922, 99608, 83529, -25079, 99608, -5418, -8871, 33233, -27020, 11736, -13463, 39056, 15069, -4315, -14216, -34290, 23003, -8374, -4778, -32597, 25217, -2317, 20092, -29169, -5244, 27850, -32911, 11934, 6558, -17711, 12512, -4139, -3930, 14379, 6211, -347, -22460, 28193, -32269, 1765, 16825, -33474, 12760, -21966, 55585, 5073, 24012, -20409, -11327, 41699, -21694, 23856, -18695, 12723, -24879, -2424, -4627, 27685, 45370, -756].span()
    };
    
    let num_trees: u32 = 32;
    let base_score: i32 = 30135;
    let opt_type: u8 = 1;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9, tree_10, tree_11, tree_12, tree_13, tree_14, tree_15, tree_16, tree_17, tree_18, tree_19, tree_20, tree_21, tree_22, tree_23, tree_24, tree_25, tree_26, tree_27, tree_28, tree_29, tree_30, tree_31].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    let program_output: Array<felt252> = array![result.into()];
    let success = result >= -146633_i32;

    processHyleOutput(
        1, initial_state.clone(), initial_state.clone(), identity, 0, payload, success, program_output,
    )
}

//////////////// SDK PART ////////////////

#[derive(Serde, Drop, Clone, Debug)]
struct HyleOutput {
    version: u32,
    initial_state: felt252,
    next_state: felt252,
    identity: ByteArray,
    tx_hash: felt252,
    payload_hash: felt252,
    success: bool,
    program_outputs: Array<felt252>
}

/// Creates a Pedersen hash chain with the elements of `data` and returns the finalized hash.
fn compute_hash_on_elements(mut data: Span<felt252>) -> felt252 {
    let data_len = data.len();
    let mut state = PedersenTrait::new(0);
    let mut hash = 0;
    loop {
        match data.pop_front() {
            Option::Some(elem) => { state = state.update_with(*elem); },
            Option::None => {
                hash = state.update_with(data_len).finalize();
                break;
            },
        };
    };
    hash
}

fn processHyleOutput(
    version: u32,
    initial_state: felt252,
    next_state: felt252,
    identity: ByteArray,
    tx_hash: felt252,
    payload: Array<felt252>,
    success: bool,
    program_output: Array<felt252>
) -> Array<felt252> {
    // Hashing payload
    let payload_span = payload.span();
    let payload_hash = compute_hash_on_elements(payload_span);

    // HyleOutput
    let hyle_output = HyleOutput {
        version: version,
        initial_state: initial_state,
        next_state: next_state,
        identity: identity,
        tx_hash: tx_hash,
        payload_hash: payload_hash,
        success: success,
        program_outputs: program_output,
    };

    let mut output: Array<felt252> = ArrayTrait::new();
    hyle_output.serialize(ref output);
    output
}
//////////////////////////////////////////
